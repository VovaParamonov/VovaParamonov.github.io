{"version":3,"sources":["img/Eni-min.svg","Components/LevelCreater/RoundCreater/RoundTypeSelect/index.jsx","Components/LevelCreater/RoundCreater/index.jsx","funcs.js","hooks.js","Components/LevelCreater/index.jsx","defaultLevels.js","Components/Header/index.jsx","Components/LevelCard/index.jsx","Components/LevelsList/index.jsx","Components/RightBar/index.js","Components/Pages/PageMain/index.jsx","Components/LevelHeader/index.jsx","Components/RoundWindow/index.jsx","Components/Pages/PageLevel/index.jsx","index.js","Components/App/index.jsx"],"names":["module","exports","__webpack_require__","p","RoundTypeSelect","props","_useState","useState","_useState2","Object","slicedToArray","isOpen","setIsOpen","roundMods","react_default","a","createElement","className","concat","onClick","e","preventDefault","mode","Transition","in","timeout","enter","exit","unmountOnExit","state","filter","el","map","key","changeMode","roundId","RoundCreater","questionHref","React","createRef","answerHrefs","type","placeholder","value","question","onChange","changeQuestion","current","ref","answer","id","push","answerId","text","toLowerCase","changeAnswer","style","backgroundColor","color","addAnswer","randomInteger","min","max","rand","Math","random","round","getCookie","name","matches","document","cookie","match","RegExp","decodeURIComponent","undefined","setCookie","date","Date","setDate","getDate","toUTCString","Round","newId","newText","newAnswer","newMode","classCallCheck","this","useLevelCtreater","title","setTitle","_useState3","_useState4","description","setDescription","_useState5","_useState6","rounds","setRounds","titleRef","descriptionRef","changer","rId","newRounds","slice","ans","ansId","addater","length","alert","newLevel","addLevel","usePageLevel","_useState7","_useState8","roundSelected","setRoundSelected","_useState9","_useState10","roundsCompleted","setRoundsCompleted","_useState11","_useState12","score","setScore","_useState13","_useState14","err","setErr","_useState15","_useState16","right","setRight","_useState17","startTime","exitLevel","JSON","stringify","levelName","error","speed","completed","getMonth","getHours","getMinutes","endLevel","find","selectedNow","nextRoundId","indexOf","changes","console","log","setTimeout","LevelCreater","_useLevelCtreater","_useLevelCtreater2","addator","create","levelCreaterToggle","action","defaultLevels","Header","src","require","alt","LevelCard","deleteSelf","deleteCard","target","startLevel","LevelsList","levels","elem","RightBar","statistic","parse","PageMain","setLevels","levelCreater","setLevelCreater","cardId","newLevels","aria-label","LevelHeader","width","RoundWindow","buttonActive","setButtonActive","exitMode","setExitMode","show","setShow","roundInput","useEffect","checkAnswer","getAnswer","replace","trim","changeScore","getElementsByClassName","buttonActivate","buttonText","buttonClassName","onExited","goNextRound","animationClassName","onSubmit","PageLevel","_usePageLevel","_usePageLevel2","ReactDOM","render","goPage","page","setSelectedPage","pageMain","levelData","newPage","selectedPage","getElementById"],"mappings":"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","file":"static/js/main.829a12a4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Eni-min.95eae398.svg\";","import React, {useState} from 'react';\r\n\r\nimport { Transition } from \"react-transition-group\";\r\n\r\nimport './style.css';\r\n\r\nexport default function RoundTypeSelect (props) {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    let roundMods = [\"Write\", \"Select\"];\r\n\r\n    let toggleView = e => {\r\n        e.preventDefault();\r\n        setIsOpen(!isOpen);\r\n    };\r\n\r\n    return (\r\n        <div className={`create-round__type_select ${(isOpen? \"opened\":\"\")}`}>\r\n            <button onClick={toggleView}><span>{props.mode}</span><i className={`fas fa-chevron-${(isOpen) ? \"left\" : \"right\"}`}/></button>\r\n            <Transition\r\n                in={isOpen}\r\n                timeout={{\r\n                    enter: 0,\r\n                    exit: 500\r\n                }}\r\n                unmountOnExit={true}\r\n            >\r\n                {state => (\r\n                    <ul className={`type_select__ul-${state}`}>{\r\n                        roundMods.filter(el => el !== props.mode)\r\n                            .map(el => <li key={el} onClick={() => {\r\n                                props.changeMode(props.roundId, el);\r\n                                setIsOpen(!isOpen);\r\n                            }}>{el}</li>)\r\n                    }</ul>\r\n                )\r\n            }\r\n            </Transition>\r\n\r\n            {/*{(isOpen)? <ul>{*/}\r\n                {/*roundMods.filter(el=>el!==props.mode)*/}\r\n                    {/*.map(el=><li key={el} onClick={()=>{*/}\r\n                        {/*props.changeMode(props.roundId, el);*/}\r\n                        {/*setIsOpen(!isOpen);*/}\r\n                    {/*}}>{el}</li>)*/}\r\n            {/*}</ul>:\"\"}*/}\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport RoundTypeSelect from './RoundTypeSelect';\r\n\r\nimport './style.css';\r\n\r\nexport default function RoundCreater(props) {\r\n\r\n\r\n    let questionHref = React.createRef();\r\n    let answerHrefs = [];\r\n\r\n    function addAnswer(e) {\r\n        e.preventDefault();\r\n        props.addAnswer(props.roundId);\r\n    }\r\n\r\n    function changeQuestion() {\r\n        props.changeQuestion(props.roundId, questionHref.current.value);\r\n    }\r\n    function changeAnswer(answerId) {\r\n        const text = answerHrefs[answerId].current.value.toLowerCase();\r\n        props.changeAnswer(props.roundId, answerId, text);\r\n    }\r\n\r\n    return(\r\n        <div className=\"create-round-wrapper\">\r\n            <RoundTypeSelect mode={props.mode} changeMode={props.changeMode} roundId={props.roundId}/>\r\n            <input\r\n                className='create-round__input'\r\n                type=\"text\"\r\n                placeholder=\"Вопрос\"\r\n                value={props.question}\r\n                onChange={changeQuestion}\r\n                ref={questionHref}\r\n            />\r\n            {\r\n                props.answer.map((answer,id) => {\r\n                    answerHrefs.push(React.createRef());\r\n                    return(\r\n                            <input\r\n                                className='create-round__input'\r\n                                key={`${props.roundId}-${id}`}\r\n                                type=\"text\"\r\n                                placeholder={`${(props.mode===\"Select\"&&id===0)?\r\n                                    \"Правильный ответ\":\r\n                                    (props.mode===\"Select\")?\r\n                                        `Вариант ответа №${id+1}`:\r\n                                        `Ответ №${id+1}`}`}\r\n                                value={answer}\r\n                                onChange={()=>changeAnswer(id)}\r\n                                ref={answerHrefs[id]}\r\n                                style={(props.mode===\"Select\"&&id===0)?{\"backgroundColor\":\"#9cffc8\",\"color\":\"#3e3f3b\"}:{}}\r\n                            />\r\n                        )\r\n                })\r\n            }\r\n            <button className=\"create-round__add-btn\" onClick={addAnswer}><i className=\"far fa-plus-square\"></i></button>\r\n        </div>\r\n    );\r\n}","function randomInteger(min, max) {\r\n    let rand = min - 0.5 + Math.random() * (max - min + 1);\r\n    rand = Math.round(rand);\r\n    return rand;\r\n}\r\n\r\n//-----cookies\r\n// возвращает cookie с именем name, если есть, если нет, то undefined\r\nfunction getCookie(name) {\r\n    let matches = document.cookie.match(new RegExp(\r\n        //\"(?:^|; )\" + name.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, '\\\\$1') + \"=([^;]*)\"\r\n        \"(?:^|; )\" + name + \"=([^;]*)\"\r\n    ));\r\n    return matches ? decodeURIComponent(matches[1]) : undefined;\r\n}\r\n\r\nfunction setCookie(cookie, value) {\r\n    let date = new Date();\r\n    date.setDate(date.getDate() + 365);\r\n    date = date.toUTCString();\r\n    document.cookie = `${cookie}=${value};path=/;expires=${date}`;\r\n}\r\n\r\nfunction deleteCookie(cookie) {\r\n    let date = new Date(0).toUTCString();\r\n    document.cookie = `${cookie}=;path=/;expires=${date}`\r\n}\r\n\r\nexport { randomInteger, getCookie, setCookie, deleteCookie }","import React, { useState }from 'react';\r\nimport {randomInteger, setCookie} from \"./funcs\";\r\n\r\nclass Round {\r\n    constructor(newId, newText, newAnswer, newMode) {\r\n        this.id = newId || this.id;\r\n        this.text = newText || this.text;\r\n        this.answer = newAnswer || this.answer;\r\n        this.mode = newMode || this.mode\r\n    }\r\n    id = 1;\r\n    text ='';\r\n    answer = [''];\r\n    mode = \"Write\";\r\n}\r\n\r\nconst useLevelCtreater = props => {\r\n    const [title, setTitle] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [rounds, setRounds] = useState([new Round()]);\r\n\r\n    const titleRef = React.createRef();\r\n    const descriptionRef = React.createRef();\r\n\r\n    const addRound = (e) => {\r\n        e.preventDefault();\r\n        setRounds(rounds.concat([new Round(rounds.length+1)]));\r\n    };\r\n\r\n    const addAnswer = (roundId) => {\r\n        setRounds(rounds.map((round,id) => {\r\n            if (id === roundId){\r\n                round.answer.push('');\r\n            }\r\n            return round\r\n        }));\r\n    };\r\n\r\n    const changeTitle = () => {\r\n        setTitle(titleRef.current.value);\r\n    };\r\n\r\n    const changeDescription = () => {\r\n        setDescription(descriptionRef.current.value);\r\n    };\r\n\r\n    const changeQuestion = (roundId, text) => {\r\n        setRounds(rounds.map((round,rId) => {\r\n            if (rId === roundId) {\r\n                round.text = text\r\n            }\r\n            return round;\r\n        }));\r\n    };\r\n\r\n    const changeAnswer = (roundId, answerId, text) => {\r\n        let newRounds = rounds.slice();\r\n\r\n        newRounds = newRounds.map((round,rId) => {\r\n            if (rId === roundId) {\r\n                round.answer = round.answer.map((ans, ansId) => {\r\n                    if (ansId === answerId) {\r\n                        return text;\r\n                    } else {\r\n                        return ans;\r\n                    }\r\n                });\r\n            }\r\n            return round;\r\n        });\r\n\r\n        setRounds(newRounds.slice());\r\n    };\r\n\r\n    const changeMode = (roundId, newMode) => {\r\n        setRounds(rounds.map((round, rId) => {\r\n            if (rId === roundId) {\r\n                round.mode = newMode;\r\n            }\r\n\r\n            return round;\r\n        }));\r\n    };\r\n\r\n    const changer = {\r\n        title: changeTitle,\r\n        description: changeDescription,\r\n        question: changeQuestion,\r\n        answer: changeAnswer,\r\n        mode: changeMode\r\n    };\r\n\r\n    const addater = {\r\n        round: addRound,\r\n        answer: addAnswer\r\n    };\r\n\r\n    const create = (e) => {\r\n        e.preventDefault();\r\n        if (rounds.length <= 2)\r\n            return alert('В уровне должно быть больше двух раундов');\r\n        let newLevel = {\r\n            id: 'none',\r\n            name: title || 'MyLevel',\r\n            description: description,\r\n            rounds: rounds\r\n        };\r\n        props.addLevel(newLevel);\r\n    };\r\n\r\n    return [\r\n        title, description, rounds,\r\n        addater,\r\n        changer,\r\n        create,\r\n        titleRef, descriptionRef\r\n    ]\r\n};\r\n\r\nconst usePageLevel = (props) => {\r\n    const [roundSelected, setRoundSelected] = useState(1);\r\n    const [roundsCompleted, setRoundsCompleted] = useState([]);\r\n    const [score, setScore] = useState(0);\r\n    const [err, setErr] = useState(0);\r\n    const [right, setRight] = useState(0);\r\n    const [startTime] = useState(new Date());\r\n\r\n    const goNextRound =(selectedNow) => {\r\n        let nextRoundId = randomInteger(1, props.rounds.length);\r\n        while(roundsCompleted.indexOf(nextRoundId) !== -1 || nextRoundId === selectedNow){\r\n            nextRoundId = randomInteger(1, props.rounds.length)\r\n        }\r\n\r\n        setRoundSelected(nextRoundId);\r\n\r\n        if (roundsCompleted.length === props.rounds.length-2){\r\n            setRoundsCompleted([selectedNow]);\r\n        } else {\r\n            setRoundsCompleted(roundsCompleted.concat(selectedNow));\r\n        }\r\n    };\r\n\r\n    const changeScore = (changes) => {\r\n        (changes > 0)?\r\n            setRight(right+1):\r\n            setErr(err+1);\r\n\r\n        console.log(right);\r\n\r\n        if (changes < 0){\r\n            if (score === 0) {\r\n                return\r\n            }\r\n        } else if (score >= 9) {\r\n            setTimeout(exitLevel, 1000);\r\n        }\r\n\r\n        setScore(score+changes);\r\n    };\r\n\r\n    const exitLevel = () => {\r\n        const date = new Date();\r\n        setCookie('lastStatistic', JSON.stringify(\r\n            {\r\n                levelName: props.name,\r\n                error: err,\r\n                right: right+1,\r\n                speed: (date - startTime) / 1000,\r\n                completed: `${date.getMonth()+1}.${date.getDate()} ${date.getHours()}:${date.getMinutes()}`\r\n            }\r\n        ));\r\n        props.endLevel();\r\n    };\r\n\r\n    let round = props.rounds.find((round) => (\r\n        round.id === roundSelected)\r\n    );\r\n\r\n    return [\r\n        score, round,\r\n        goNextRound,\r\n        changeScore\r\n    ]\r\n};\r\n\r\nexport { useLevelCtreater, usePageLevel };","import React from 'react';\r\n\r\nimport RoundCreater from \"./RoundCreater\";\r\nimport { useLevelCtreater } from '../../hooks'\r\n\r\nimport './style.css';\r\n\r\n\r\nexport default function LevelCreater (props) {\r\n    const [\r\n        title, description, rounds,\r\n        addator, // has methods for add: round, answer\r\n        changer, // has methods for change: title,description,question,answer\r\n        create,\r\n        titleRef, descriptionRef\r\n    ] = useLevelCtreater(props);\r\n\r\n    return (\r\n        <div className=\"create-window\">\r\n            <button onClick={props.levelCreaterToggle} className='level-creater__exit-btn' ><i className=\"far fa-times-circle\"></i></button>\r\n            <form action=\"#\" className=\"create-form\">\r\n                <div className='level-create__head'>\r\n                    <input\r\n                        className='level-creat__title'\r\n                        ref={titleRef}\r\n                        type=\"text\"\r\n                        value={title}\r\n                        placeholder='Name of level'\r\n                        onChange={changer.title}\r\n                    />\r\n                    <input\r\n                        className='level-creat__description'\r\n                        ref={descriptionRef}\r\n                        type=\"text\"\r\n                        value={description}\r\n                        placeholder='Description'\r\n                        onChange={changer.description}\r\n                    />\r\n                </div>\r\n                {\r\n                    rounds.map((round,id) => (\r\n                        <RoundCreater\r\n                            key={id}\r\n                            roundId={id}\r\n                            question={round.text}\r\n                            answer={round.answer}\r\n                            mode={round.mode}\r\n                            addAnswer={addator.answer}\r\n                            changeQuestion={changer.question}\r\n                            changeAnswer={changer.answer}\r\n                            changeMode={changer.mode}\r\n                        />\r\n                    ))\r\n                }\r\n                <button className=\"create-round__add-btn create-round__add-round-btn\" onClick={addator.round}><i className=\"far fa-plus-square\"></i></button>\r\n            </form>\r\n            <button className=\"create-window__create-button\" onClick={create}>Создать</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n// export default class LevelCreater extends Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//\r\n//         this.state = {\r\n//             title:'',\r\n//             description:'',\r\n//             rounds: [\r\n//                 {\r\n//                     id: 1,\r\n//                     text: '',\r\n//                     answer: ['']\r\n//                 }\r\n//             ]\r\n//         };\r\n//\r\n//         this.titleRef = React.createRef();\r\n//         this.descriptionRef = React.createRef();\r\n//     }\r\n//\r\n//     addRound = (e) => {\r\n//         e.preventDefault();\r\n//         this.setState(oldState => {\r\n//             return {\r\n//                 rounds: oldState.rounds.concat([{\r\n//                     id: oldState.rounds.length+1,\r\n//                     text: '',\r\n//                     answer: ['']\r\n//                 }])\r\n//             }\r\n//         })\r\n//     };\r\n//\r\n//     addAnswer = (roundId) => {\r\n//         this.setState(oldState => {\r\n//             return {\r\n//                 rounds: oldState.rounds.map((round,id) => {\r\n//                     if (id === roundId){\r\n//                         round.answer.push('');\r\n//                     }\r\n//                     return round\r\n//                 })\r\n//             }\r\n//         })\r\n//     };\r\n//\r\n//     changeTitle = () => {\r\n//         this.setState({\r\n//             title: this.titleRef.current.value\r\n//         })\r\n//     };\r\n//     changeDescription = () => {\r\n//         this.setState({\r\n//             description: this.descriptionRef.current.value\r\n//         })\r\n//     };\r\n//\r\n//     changeQuestion = (roundId, text) => {\r\n//         this.setState(oldState => {\r\n//             return {\r\n//                 rounds: oldState.rounds.map((round,rId) => {\r\n//                     if (rId === roundId) {\r\n//                         round.text = text\r\n//                     }\r\n//                     return round;\r\n//                 })\r\n//             }\r\n//         });\r\n//     };\r\n//\r\n//     changeAnswer = (roundId, answerId, text) => {\r\n//         this.setState(oldState => {\r\n//             let newRounds = oldState.rounds.slice();\r\n//\r\n//             newRounds = newRounds.map((round,rId) => {\r\n//                 if (rId === roundId) {\r\n//                     round.answer = round.answer.map((ans, ansId) => {\r\n//                         if (ansId === answerId) {\r\n//                             return text;\r\n//                         } else {\r\n//                             return ans;\r\n//                         }\r\n//                     });\r\n//                 }\r\n//                 return round;\r\n//             });\r\n//\r\n//             return {\r\n//                 rounds: newRounds.slice()\r\n//             }\r\n//         })\r\n//     };\r\n//\r\n//     create = (e) => {\r\n//         e.preventDefault();\r\n//         if (this.state.rounds.length <= 2)\r\n//             return alert('В уровне должно быть больше двух раундов');\r\n//         let newLevel = {\r\n//             id: 'none',\r\n//             name: this.state.title || 'MyLevel',\r\n//             description: this.state.description,\r\n//             rounds: this.state.rounds\r\n//         };\r\n//         this.props.addLevel(newLevel);\r\n//     };\r\n//\r\n//     render() {\r\n//         return (\r\n//             <div className=\"create-window\">\r\n//                 <button onClick={this.props.levelCreaterToggle} className='level-creater__exit-btn' ><i className=\"far fa-times-circle\"></i></button>\r\n//                 <form action=\"#\" className=\"create-form\">\r\n//                     <div className='level-create__head'>\r\n//                         <input\r\n//                             className='level-creat__title'\r\n//                             ref={this.titleRef}\r\n//                             type=\"text\"\r\n//                             value={this.state.title}\r\n//                             placeholder='Название'\r\n//                             onChange={this.changeTitle}\r\n//                         />\r\n//                         <input\r\n//                             className='level-creat__description'\r\n//                             ref={this.descriptionRef}\r\n//                             type=\"text\"\r\n//                             value={this.state.description}\r\n//                             placeholder='Описание'\r\n//                             onChange={this.changeDescription}\r\n//                         />\r\n//\r\n//                     </div>\r\n//                     {\r\n//                         this.state.rounds.map((round,id) => (\r\n//                                 <RoundCreater\r\n//                                     key={id}\r\n//                                     roundId={id}\r\n//                                     question={round.text}\r\n//                                     answer={round.answer}\r\n//                                     addAnswer={this.addAnswer}\r\n//                                     changeQuestion={this.changeQuestion}\r\n//                                     changeAnswer={this.changeAnswer}\r\n//                                 />\r\n//                         ))\r\n//                     }\r\n//                     <button className=\"create-round__add-btn create-round__add-round-btn\" onClick={this.addRound}><i className=\"far fa-plus-square\"></i></button>\r\n//                 </form>\r\n//\r\n//                 <button className=\"create-window__create-button\" onClick={this.create}>Создать</button>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n//start changes","const defaultLevels = [\r\n    {\r\n        id: 1,\r\n        name: \"Colors\",\r\n        description: \"Демо уровень с цветами\",\r\n        rounds: [\r\n            {\r\n                id: 1,\r\n                text: 'black',\r\n                answer: ['черный', 'чёрный'],\r\n                mode: \"Write\"\r\n            },\r\n            {\r\n                id: 2,\r\n                text: 'white',\r\n                answer: ['белый'],\r\n                mode: \"Write\"\r\n            },\r\n            {\r\n                id: 3,\r\n                text: 'green',\r\n                answer: ['зеленый'],\r\n                mode: \"Write\"\r\n            },\r\n            {\r\n                id: 4,\r\n                text: 'pink',\r\n                answer: ['розовый'],\r\n                mode: \"Write\"\r\n            },\r\n            {\r\n                id: 5,\r\n                text: 'yellow',\r\n                answer: ['желтый'],\r\n                mode: \"Write\"\r\n            },\r\n            {\r\n                id: 6,\r\n                text: 'brown',\r\n                answer: ['коричневый'],\r\n                mode: \"Write\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        id: 2,\r\n        name: \"Animals\",\r\n        description: \"Демо уровень с животными\",\r\n        rounds: [\r\n            {\r\n                id: 1,\r\n                text: 'Cat',\r\n                answer: ['кот', 'кошка'],\r\n                mode: \"Write\"\r\n            },\r\n            {\r\n                id: 2,\r\n                text: 'chicken',\r\n                answer: ['курица'],\r\n                mode: \"Write\"\r\n            },\r\n            {\r\n                id: 3,\r\n                text: 'crab',\r\n                answer: ['краб'],\r\n                mode: \"Write\"\r\n            }\r\n        ]\r\n    }\r\n\r\n];\r\n\r\nexport default defaultLevels;","import React from 'react';\r\n\r\nimport './style.css';\r\n\r\nexport default function Header (props) {\r\n    return (\r\n        <header className=\"header-main\" >\r\n            <img className=\"eni_logo\" src={require('../../img/Eni-min.svg')} alt=\"\"/>\r\n            <h1 className={\"logoMain\"}><span>local</span>EnLearning</h1>\r\n        </header>\r\n    )\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './style.css';\r\n\r\nexport default function LevelCard (props){\r\n    const deleteSelf = () => {\r\n        props.deleteCard(props.id)\r\n    };\r\n\r\n    const startLevel = (e) => {\r\n        if(e.target.className === \"fas fa-trash-alt delete-icon\"){ // fix\r\n            return deleteSelf();\r\n        }\r\n        console.log(props.rounds);\r\n        props.startLevel({\r\n            name: props.name,\r\n            rounds: props.rounds\r\n        });\r\n    };\r\n\r\n    return (\r\n        <li className={\"LevelCard\"} onClick={startLevel}>\r\n            <div className='LevelCard__play'>\r\n                <i className=\"fas fa-play\"></i>\r\n            </div>\r\n            <h2 className={\"LevelCard__name\"}>{props.name}</h2>\r\n            <p className={\"LevelCard__description\"}>{props.description}</p>\r\n            <i\r\n                className=\"fas fa-trash-alt delete-icon\"\r\n                onClick={deleteSelf}\r\n            />\r\n        </li>\r\n    )\r\n}\r\n\r\nLevelCard.propTypes = {\r\n    name: PropTypes.string,\r\n    description: PropTypes.string,\r\n    rounds: PropTypes.array,\r\n    startLevel: PropTypes.func,\r\n    id: PropTypes.number,\r\n    deleteCard: PropTypes.func\r\n};\r\n","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport './style.css';\r\n\r\nimport LevelCard from \"../LevelCard\";\r\n\r\nexport default function LevelsList (props) {\r\n    const getListElements = arr => (arr.map(elem => (\r\n                <LevelCard\r\n                    key={elem.id}\r\n                    id={elem.id}\r\n                    name={elem.name}\r\n                    description={elem.description}\r\n                    rounds={elem.rounds}\r\n                    startLevel={props.startLevel}\r\n                    deleteCard={props.deleteCard}\r\n                />\r\n                )));\r\n\r\n    return (\r\n        <ul className={\"LevelsList\"}>\r\n            {getListElements(props.levels)}\r\n        </ul>\r\n    )\r\n}\r\n\r\nLevelsList.propTypes = {\r\n    startLevel: PropTypes.func\r\n};","import React from 'react';\r\n\r\nimport './style.css';\r\n\r\nimport { getCookie } from \"../../funcs\";\r\n\r\nexport default function RightBar (props) {\r\n\r\n    let statistic;\r\n    if(getCookie(\"lastStatistic\")) {\r\n        statistic = JSON.parse(getCookie(\"lastStatistic\"));\r\n    }\r\n\r\n    return (\r\n        <article className=\"right-bar\" >\r\n            <h2>Statistic last test</h2>\r\n            {(!statistic)?\r\n                <div className=\"right-bar__empty\">\r\n                    <img className=\"right-bar__img\" src={require('../../img/Eni-min.svg')} alt=\"Eni\"/>\r\n                    <p className=\"right-bar__empty-text\">Empty now</p>\r\n                </div>\r\n            :\r\n                <div className=\"right-bar__statistic\">\r\n                    <p className=\"statistic__level-name\">{statistic.levelName}</p>\r\n                    <p>{`Error: ${statistic.error}`}</p>\r\n                    <p>{`Right: ${statistic.right}`}</p>\r\n                    <p>{`Speed: ${statistic.speed} s`}</p>\r\n                    <span>{`Completed: ${statistic.completed}`}</span>\r\n                </div>\r\n            }\r\n\r\n        </article>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LevelCreater from \"../../LevelCreater\";\r\n\r\nimport './style.css';\r\n\r\nimport defaultLevels from '../../../defaultLevels';\r\n\r\nimport Header from  \"../../Header\";\r\nimport LevelsList from \"../../LevelsList\";\r\nimport RightBar from \"../../RightBar\";\r\n\r\nimport {getCookie, setCookie} from \"../../../funcs\";\r\n\r\nexport default function PageMain (props) {\r\n    if (!getCookie('levels')) {\r\n        console.log('Сохраненных уровней нет. Установка уровней по умолчанию');\r\n        setCookie('levels', JSON.stringify(defaultLevels));\r\n    }\r\n\r\n    const [levels, setLevels] = useState(JSON.parse(getCookie('levels')));\r\n    const [levelCreater, setLevelCreater] = useState(false); //for toggle view of window of level create\r\n\r\n    const deleteCard = (cardId) => {\r\n        let newLevels = levels.filter(elem => elem.id !== cardId);\r\n        setCookie('levels', JSON.stringify(newLevels));\r\n        setLevels(newLevels);\r\n    };\r\n\r\n    const levelCreaterToggle = () => {\r\n        setLevelCreater(!levelCreater);\r\n    };\r\n\r\n    const addLevel = (newLevel) => {\r\n        newLevel.id = levels.length+1;\r\n        let newLevels = levels.slice();\r\n        newLevels.push(newLevel);\r\n        setCookie('levels', JSON.stringify(newLevels));\r\n        setLevels(newLevels);\r\n        setLevelCreater(false);\r\n     };\r\n\r\n    return (\r\n        <div className={\"PageMain\"}>\r\n             <Header/>\r\n             <div className=\"PageMain__content\">\r\n                 <main>\r\n                     <LevelsList\r\n                         levels={levels}\r\n                         startLevel={props.startLevel}\r\n                         deleteCard={deleteCard}\r\n                     />\r\n                     <button\r\n                         className='levels-list__add-btn hint--right'\r\n                         aria-label='Создать новый тест'\r\n                         onClick={levelCreaterToggle}\r\n                     >\r\n                         <i className=\"far fa-plus-square\"></i>\r\n                     </button>\r\n                 </main>\r\n                 <RightBar/>\r\n             </div>\r\n            {(levelCreater)?<LevelCreater levelCreaterToggle={levelCreaterToggle} addLevel={addLevel} />:''}\r\n         </div>\r\n    )\r\n}\r\n\r\nPageMain.propTypes = {\r\n    startLevel: PropTypes.func\r\n};","import React from 'react';\r\n\r\nimport './style.css';\r\n\r\nexport default function LevelHeader (props) {\r\n    //const [exp, setExp] = useState(0);\r\n    const score = props.score;\r\n\r\n    return(\r\n        <header className=\"header-level\">\r\n            <h1>{props.levelName}</h1>\r\n            <h1 className={\"header__score\"}>{`Score: ${score}`}</h1>\r\n            <div className=\"score-bar\"><div className=\"score-bar__fill\" style={{\"width\":`${score * 10}%`}}></div></div>\r\n        </header>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport \"./style.css\";\r\nimport { Transition } from \"react-transition-group\";\r\n\r\nexport default function RoundWindow (props) {\r\n    const [buttonActive, setButtonActive] = useState(false);\r\n    const [exitMode, setExitMode] = useState(\"RoundWindow\"); // mod of view round window\r\n    const [show, setShow] = useState(true);\r\n\r\n    const roundInput = React.createRef();\r\n\r\n    useEffect(()=>{\r\n        setShow(true);\r\n    }, []);\r\n\r\n    const roundClear = () => {\r\n        setButtonActive(false);\r\n        roundInput.current.value = '';\r\n    };\r\n\r\n    const checkAnswer = (e) => {\r\n        e.preventDefault();\r\n        let answer = getAnswer().value.replace(/\\s{2,}/g, ' ').trim().toLowerCase();\r\n\r\n        if (props.answer.find( (el) => (el === answer) )) {\r\n            props.changeScore(1);\r\n\r\n            setExitMode(\"right-answer\");\r\n        } else {\r\n            props.changeScore(-1);\r\n            setExitMode(\"fail-answer\");\r\n        }\r\n\r\n        setShow(false);\r\n    };\r\n\r\n    const getAnswer = () => {\r\n        return document.getElementsByClassName(\"RoundWindow__input\")[0];\r\n    };\r\n\r\n    const buttonActivate = () => {\r\n        if (getAnswer().value){\r\n            setButtonActive(true);\r\n        } else {\r\n            setButtonActive(false);\r\n        }\r\n    };\r\n\r\n    const text = props.text;\r\n    const buttonText = buttonActive? \"Проверить\": \"Пропустить\";\r\n    const buttonClassName = buttonActive?\r\n        \"RoundWindow__button RoundWindow__button_action\":\r\n        \"RoundWindow__button\";\r\n\r\n    return (\r\n        <Transition\r\n            in={show}\r\n            timeout={0}\r\n            onExited={\r\n                () => {\r\n                    roundClear();\r\n                    setTimeout(()=>{\r\n                        setExitMode(\"RoundWindow\");\r\n                        setShow(true);\r\n                        props.goNextRound(props.roundId);\r\n                    },500);\r\n                }\r\n            }\r\n        >\r\n            {(state) => {\r\n                const animationClassName = `${exitMode}-${state}`;\r\n\r\n                return (\r\n                    <div className={`RoundWindow ${animationClassName}`}>\r\n                        <p className={`RoundWindow__text`} >{`${text} [${props.mode}]`}</p>\r\n                        <form action=\"#\" onSubmit={checkAnswer}>\r\n                            <input\r\n                                type=\"text\"\r\n                                className={\"RoundWindow__input\"}\r\n                                onChange={buttonActivate}\r\n                                ref={roundInput}\r\n                            />\r\n                            <input\r\n                                type=\"submit\"\r\n                                value={buttonText}\r\n                                className={buttonClassName}\r\n                            />\r\n                        </form>\r\n                    </div>\r\n                )\r\n            }}\r\n        </Transition>\r\n    )\r\n}\r\n\r\nRoundWindow.propTypes = {\r\n    text: PropTypes.string,\r\n    answer: PropTypes.array,\r\n    roundId: PropTypes.number,\r\n    goNextRound: PropTypes.func,\r\n    changeScore: PropTypes.func\r\n};","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './style.css';\r\nimport LevelHeader from \"../../LevelHeader\";\r\nimport RoundWindow from \"../../RoundWindow\";\r\n\r\nimport { usePageLevel } from '../../../hooks'\r\n\r\nexport default function PageLevel (props) {\r\n\r\n    const [\r\n        score, round,\r\n        goNextRound,\r\n        changeScore\r\n    ] = usePageLevel(props);\r\n\r\n\r\n    return (\r\n        <div className={\"PageLevel\"}>\r\n            <LevelHeader levelName={props.name} score={score}/>\r\n\r\n            <RoundWindow\r\n                text={round.text}\r\n                answer={round.answer}\r\n                roundId={round.id}\r\n                goNextRound={goNextRound}\r\n                changeScore={changeScore}\r\n                mode={round.mode}\r\n            />\r\n\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\n\r\n// export default class PageLevel extends Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//\r\n//         this.state = {\r\n//             roundSelected: 1,\r\n//             roundsCompleted: [],\r\n//             score: 0,\r\n//             err: 0,\r\n//             right: 0,\r\n//             startTime: new Date()\r\n//         }\r\n//     }\r\n//\r\n//     goNextRound = (selectedNow) => {\r\n//         if (this.state.roundsCompleted.length === this.props.rounds.length-2) {\r\n//             this.setState({roundsCompleted: []});\r\n//         }\r\n//\r\n//         let nextRoundId = randomInteger(1, this.props.rounds.length);\r\n//         while(this.state.roundsCompleted.indexOf(nextRoundId) !== -1 || nextRoundId === selectedNow){\r\n//             nextRoundId = randomInteger(1, this.props.rounds.length)\r\n//         }\r\n//\r\n//         this.setState((oldState)=>{\r\n//             return {\r\n//                 roundSelected: nextRoundId,\r\n//                 roundsCompleted: oldState.roundsCompleted.concat(selectedNow)\r\n//             }\r\n//         });\r\n//         console.log(this.state.roundsCompleted);\r\n//     };\r\n//\r\n//     changeScore = (changes) => {\r\n//         (changes > 0)?\r\n//             this.setState(oldState=>({right:oldState.right+1})):\r\n//             this.setState(oldState=>({err:oldState.err+1}));\r\n//\r\n//         if (changes < 0){\r\n//             if (this.state.score === 0) {\r\n//                 return\r\n//             }\r\n//         } else if (this.state.score >= 9) {\r\n//             setTimeout(this.exitLevel, 1000);\r\n//         }\r\n//\r\n//         this.setState((state) => {\r\n//             return{score: state.score + changes}\r\n//         });\r\n//     };\r\n//\r\n//     exitLevel = () => {\r\n//         const date = new Date();\r\n//         setCookie('lastStatistic', JSON.stringify(\r\n//             {\r\n//                 levelName: this.props.name,\r\n//                 error: this.state.err,\r\n//                 right: this.state.right,\r\n//                 speed: (date - this.state.startTime) / 1000,\r\n//                 completed: `${date.getMonth()+1}.${date.getDate()} ${date.getHours()}:${date.getMinutes()}`\r\n//             }\r\n//         ));\r\n//         this.props.endLevel();\r\n//     };\r\n//\r\n//     render() {\r\n//         const score = this.state.score;\r\n//         let round = this.props.rounds.find((round) => (\r\n//             round.id === this.state.roundSelected)\r\n//         );\r\n//         const roundText = round.text;\r\n//         const roundAnswer = round.answer;\r\n//         const roundId = round.id;\r\n//\r\n//         return (\r\n//             <div className={\"PageLevel\"}>\r\n//                 <LevelHeader levelName={this.props.name} score={score}/>\r\n//\r\n//                 <RoundWindow\r\n//                     text={roundText}\r\n//                     answer={roundAnswer}\r\n//                     roundId={roundId}\r\n//                     goNextRound={this.goNextRound}\r\n//                     changeScore={this.changeScore}\r\n//                 />\r\n//\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\nPageLevel.propTypes = {\r\n    name: PropTypes.string,\r\n    rounds: PropTypes.array,\r\n    goPage: PropTypes.func\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\n\nReactDOM.render(<App/>, document.getElementById('root'));","import React, {useState} from 'react';\r\n\r\nimport './style.css';\r\nimport './../../hint.css';\r\n\r\nimport PageMain from \"../Pages/PageMain\";\r\nimport PageLevel from \"../Pages/PageLevel\";\r\n\r\nexport default function App (props) {\r\n    const goPage = (page) => {\r\n        setSelectedPage(page);\r\n    };\r\n\r\n    const endLevel = () => {\r\n        goPage(pageMain);\r\n    };\r\n\r\n    const startLevel = levelData => {\r\n        const newPage = <PageLevel // create level page\r\n            name={levelData.name}\r\n            rounds={levelData.rounds}\r\n            goPage={goPage}\r\n            endLevel={endLevel}\r\n        />;\r\n\r\n        goPage(newPage);\r\n    };\r\n\r\n    let pageMain = <PageMain startLevel={startLevel} />;\r\n\r\n    const [selectedPage, setSelectedPage] = useState(pageMain);\r\n\r\n    return selectedPage\r\n}\r\n"],"sourceRoot":""}