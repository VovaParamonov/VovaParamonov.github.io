{"version":3,"sources":["contexts/connection.ts","contexts/messages.ts","hooks/useConnection.ts","components/GlobalContext.tsx","assets/bg.mp4","assets/bg.png","components/Bg/Bg.tsx","components/MessageLisst/MessagesList.tsx","hooks/useSocketRequests.ts","api/reuests.ts","components/MessageEditor/MessageEditor.tsx","components/Window/Window.tsx","components/MainSideBar/modules/UserList.tsx","components/MainSideBar/MainSideBar.tsx","components/MainWindow/MainWindow.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SocketContext","React","createContext","undefined","anyWindow","window","reconnectionCount","connection","onMessage","logger","socket","WebSocket","process","onmessage","onclose","event","console","log","setTimeout","error","clearTimeout","clearReconnectionCounterTimeOut","newConnection","e","MessagesContext","useConnection","handlers","useState","setSocket","handleSocket","type","JSON","parse","data","useEffect","connectionResult","GlobalContext","children","messages","setMessages","pushMessage","message","prevState","msg","id","Date","getTime","toString","Provider","value","Bg","props","src","imgBgSrc","className","videoSrc","autoPlay","loop","muted","width","height","MessagesList","useContext","messagesListRef","useRef","current","scrollHeight","scrollTop","messagesJSX","map","date","owner","getHours","getMinutes","text","ref","useSocketRequests","sendMessage","action","send","stringify","sendMessageRequest","MessageEditor","messageText","setMessageText","handleSend","length","onKeyDown","code","preventDefault","onChange","target","name","cols","rows","onClick","Window","sideBar","controls","containerClassName","toolbar","mockedData","userName","UserList","users","sort","u1","innerWidth","windowWidth","setWindowWidth","listener","currentTarget","addEventListener","removeEventListener","user","toUpperCase","MainSideBar","MainWindow","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db0e22b5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Logger } from \"../Models/Logger\";\r\n\r\ntype SocketContextType = {\r\n  socket: WebSocket;\r\n}\r\n\r\nexport const SocketContext = React.createContext<SocketContextType>(undefined!);\r\n\r\nconst anyWindow = window as any;\r\n\r\nanyWindow.reconnectionCount = 0;\r\n\r\nexport const connection = (onMessage: (event: any) => void, logger?: Logger): WebSocket | null => {\r\n  try {\r\n    const socket = new WebSocket(process.env.REACT_APP_SOCKET_URL!);\r\n\r\n    socket.onmessage = onMessage;\r\n\r\n    socket.onclose = (event) => {\r\n      console.log('Socket closed by event:', event);\r\n\r\n      console.log('Trying to reconnect...');\r\n      setTimeout(() => {\r\n        if (anyWindow.reconnectionCount >= 4) {\r\n          console.error('Too many reconnection attempts');\r\n          if (logger) {\r\n            logger('There are too many reconnection attempts. You are disconnected', \"error\");\r\n          }\r\n          return;\r\n        }\r\n        anyWindow.reconnectionCount++;\r\n        console.log(\"!!!!!: \", anyWindow.reconnectionCount);\r\n        clearTimeout((window as any).clearReconnectionCounterTimeOut);\r\n\r\n        try {\r\n          const newConnection = connection(onMessage, logger);\r\n\r\n          (window as any).clearReconnectionCounterTimeOut = setTimeout(() => {\r\n            anyWindow.reconnectionCount = 0\r\n          }, 10000);\r\n          console.log('Successfully reconnected: ', newConnection);\r\n        } catch (e) {\r\n          console.error(\"Error of reconnection: \", e);\r\n          if (logger) {\r\n            logger('You were disconnected from the chat', 'error');\r\n          }\r\n        }\r\n      }, 1000);\r\n    }\r\n\r\n    console.log('Successfully websocket connection:', socket);\r\n\r\n    return socket;\r\n  } catch (e) {\r\n    console.log('Something went wrong while websocket connection: ', e);\r\n    if (logger) {\r\n      logger('You were disconnected from the chat', 'error');\r\n    }\r\n    // TODO: implement global API Error\r\n    return null;\r\n  }\r\n}","import React  from \"react\";\r\nimport { Message } from \"../Models/Message\";\r\nimport { Logger, SystemMessage } from \"../Models/Logger\";\r\n\r\ntype MessagesContextType = {\r\n  messages: (Message | SystemMessage)[];\r\n  log: Logger,\r\n}\r\n\r\nexport const MessagesContext = React.createContext<MessagesContextType>(undefined!);\r\n","import { useContext, useEffect, useState } from 'react';\r\n\r\nimport { connection, SocketContext } from '../contexts/connection';\r\nimport { Logger } from \"../Models/Logger\";\r\n// TODO: Moved request typing to backend\r\ntype RequestsTypes = 'message';\r\n\r\ntype Handlers = {\r\n  [key in RequestsTypes]?: (data: any) => void;\r\n}\r\n\r\ntype EventType = {\r\n  type: RequestsTypes,\r\n  data: any\r\n}\r\n\r\nconst useConnection = (handlers: Handlers, log?: Logger) => {\r\n  const [socket, setSocket] = useState<WebSocket | null>(null);\r\n\r\n  const handleSocket = (event: EventType) => {\r\n    if (event.type in handlers) {\r\n      handlers[event.type]!(JSON.parse(event.data));\r\n    } else {\r\n      console.error(`Unhandled socket event type {${event.type}}:`, event);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const connectionResult = connection(handleSocket, log)\r\n\r\n    setSocket(connectionResult);\r\n\r\n    if (log && connectionResult) {\r\n      log('Successful connection to the chat. You can chat');\r\n    }\r\n  }, []);\r\n\r\n  return socket;\r\n};\r\n\r\nexport default useConnection;","import React, { FunctionComponent, useState } from 'react';\n\nimport { SocketContext } from '../contexts/connection';\nimport { MessagesContext } from '../contexts/messages';\nimport useConnection from '../hooks/useConnection';\nimport { Message } from '../Models/Message';\nimport { Logger, SystemMessage } from \"../Models/Logger\";\n\nconst GlobalContext: FunctionComponent = ({ children }) => {\n  const [messages, setMessages] = useState<(Message | SystemMessage)[]>([]);\n\n  const onMessage = (data: Message) => {\n    console.log('Received message:', data);\n    setMessages((prevState) => [...prevState, data]);\n  };\n\n  const pushMessage = (message: Message | SystemMessage) => {\n    setMessages((prevState) => [...prevState, message]);\n  }\n\n  const log: Logger = (message: string, type= 'info') => {\n    pushMessage({\n      type,\n      msg: message,\n      id: new Date().getTime().toString()\n    });\n  }\n\n  const socket = useConnection({\n    message: onMessage,\n  }, log);\n\n  if (!socket) {\n    return <>Loading...</>;\n  }\n\n  return (\n    <SocketContext.Provider value={{ socket: socket }}>\n      <MessagesContext.Provider value={{ messages, log }}>\n        {children}\n      </MessagesContext.Provider>\n    </SocketContext.Provider>\n  );\n};\n\nexport default GlobalContext;","export default __webpack_public_path__ + \"static/media/bg.30eec6b5.mp4\";","export default __webpack_public_path__ + \"static/media/bg.6771a782.png\";","import React, { FunctionComponent } from 'react';\r\nimport './Bg.css';\r\n//@ts-ignore\r\nimport videoSrc from '../../assets/bg.mp4';\r\nimport imgBgSrc from '../../assets/bg.png';\r\n\r\ntype BgProps = {\r\n\r\n}\r\n\r\nconst Bg: FunctionComponent<BgProps> = (props) => {\r\n  return <>\r\n    <img\r\n      src={imgBgSrc}\r\n      className=\"static_bg\"\r\n    />\r\n    <video\r\n      className=\"live_bg\"\r\n      src={videoSrc}\r\n      autoPlay={true}\r\n      loop={true}\r\n      muted={true}\r\n      width=\"100%\"\r\n      height=\"100%\"\r\n    />\r\n  </>;\r\n}\r\n\r\nexport default Bg;\r\n","import React, { FunctionComponent, useContext, useEffect, useRef } from 'react';\nimport { MessagesContext } from '../../contexts/messages';\nimport './MessageList.css';\n\ntype MessagesListProps = {};\n\nconst MessagesList: FunctionComponent<MessagesListProps> = (props) => {\n  const { messages } = useContext(MessagesContext);\n  const messagesListRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (messagesListRef.current) {\n      console.log(messagesListRef.current.scrollHeight);\n      messagesListRef.current.scrollTop = messagesListRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  const messagesJSX = messages.map(message => {\n    if ('type' in message) {\n      return (\n        <li className={`message--system message--system--${message.type}`} key={message.id} >\n          { message.msg }\n        </li>\n      );\n    } else {\n      const date = new Date(message.date);\n\n      return (\n        <li className={`message ${message?.owner ? 'my' : '' }`} key={message.id} >\n          <span className={\"message__time\"} >{date.getHours()}:{date.getMinutes()}</span>\n          { message.text }\n        </li>\n      );\n    }\n  })\n\n  return <div ref={messagesListRef} className=\"messages_list_wrapper\">\n    <ul className=\"messages_list\">\n      {messagesJSX}\n    </ul>\n  </div>;\n};\n\nexport default MessagesList;\n","import { useContext } from 'react';\r\n\r\nimport { SocketContext } from '../contexts/connection';\r\nimport { sendMessage as sendMessageRequest } from '../api/reuests';\r\nimport { MessagesContext } from \"../contexts/messages\";\r\n\r\nconst useSocketRequests = () => {\r\n  const { socket } = useContext(SocketContext);\r\n  const { log } = useContext(MessagesContext);\r\n\r\n  const sendMessage = (message: string) => {\r\n    try {\r\n      sendMessageRequest(socket, { message });\r\n    } catch (e) {\r\n      log('Something went wrong with sending', 'error');\r\n    }\r\n  }\r\n\r\n  return {\r\n    sendMessage\r\n  }\r\n}\r\n\r\nexport default useSocketRequests;","import { Message } from '@webchat_test/messages';\n\ntype SocketRequest<Data> = (socket: WebSocket, data: Data) => unknown;\n\nexport const sendMessage: SocketRequest<{ message: Message['text'] }> = (\n  socket: WebSocket,\n  { message }\n) => {\n  const msg = {\n    action: 'sendmessage',\n    text: message,\n  };\n\n  socket.send(JSON.stringify(msg));\n};\n","import React, { ChangeEvent, FunctionComponent, useState } from 'react';\r\nimport useSocketRequests from \"../../hooks/useSocketRequests\";\r\nimport './MessageEditor.css';\r\n\r\ntype MessageEditorProps = {\r\n\r\n}\r\n\r\nconst MessageEditor: FunctionComponent<MessageEditorProps> = (props) => {\r\n  const [messageText, setMessageText] = useState('');\r\n  const { sendMessage } = useSocketRequests();\r\n\r\n  const validation = () => {\r\n    if (messageText.length <= 0) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  const handleChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    setMessageText(e.target.value);\r\n  }\r\n\r\n  const handleSend = () => {\r\n    if (validation()) {\r\n      setMessageText('');\r\n      sendMessage(messageText);\r\n    }\r\n  }\r\n\r\n  const handleKey = (event: any) => {\r\n    if (event.code === 'Enter') {\r\n      handleSend();\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  return <div className={'message_editor_container'}>\r\n    <textarea\r\n      onKeyDown={handleKey}\r\n      value={messageText}\r\n      onChange={handleChange}\r\n      name=\"msg_editor\"\r\n      id=\"msg_editor_textarea\"\r\n      cols={5}\r\n      rows={10}\r\n    />\r\n    <button onClick={handleSend} className=\"message_editor__send_button\" />\r\n  </div>;\r\n}\r\n\r\nexport default MessageEditor;\r\n","import React, { CSSProperties, FunctionComponent } from 'react';\r\nimport './Window.css';\r\n\r\ntype WindowProps = {\r\n  controls?: boolean;\r\n  toolbar?: React.ReactNode;\r\n  sideBar?: React.ReactNode;\r\n  className?: string\r\n  width?: CSSProperties['width'],\r\n  height?: CSSProperties['height'],\r\n  containerClassName?: string\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst Window: FunctionComponent<WindowProps> = (props) => {\r\n  const {\r\n    className,\r\n    children,\r\n    sideBar,\r\n    containerClassName,\r\n    controls,\r\n    toolbar\r\n  } = props;\r\n\r\n  return <div className={`window ${className || ''}`}>\r\n    <div className=\"window__header\">\r\n      <div className=\"window_header__container\">\r\n        { controls && <div className=\"window__controls\" />}\r\n        { toolbar || null }\r\n      </div>\r\n    </div>\r\n    <div className='window__inner' >\r\n      { sideBar && (\r\n        <div className=\"window__sidebar\">\r\n          {sideBar}\r\n        </div>\r\n      )}\r\n      <div className=\"window__content\">\r\n        {children}\r\n      </div>\r\n    </div>\r\n  </div>;\r\n}\r\n\r\nexport default Window;\r\n","import React, { FunctionComponent, useEffect, useState } from 'react';\r\nimport './UserList.css';\r\n\r\ntype UserListProps = {\r\n\r\n}\r\n\r\n// TODO: remove mocks\r\nconst mockedData = [\r\n  {\r\n    id: 'someid',\r\n    userName: 'Username'\r\n  },\r\n  {\r\n    id: 'someid23',\r\n    userName: 'Vladimir',\r\n    owner: true\r\n  }\r\n];\r\n\r\nconst UserList: FunctionComponent<UserListProps> = (props) => {\r\n  const users = mockedData.sort(u1 => !u1.owner && 1 || -1);\r\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n\r\n  useEffect(() => {\r\n    const listener = (event: UIEvent) => {\r\n      setWindowWidth((event.currentTarget! as Window).innerWidth);\r\n    }\r\n    window.addEventListener('resize', listener);\r\n\r\n    return () => window.removeEventListener('resize', listener);\r\n  }, []);\r\n\r\n  return (\r\n    <ul className={`main_sidebar__user_list ${windowWidth < 600 ? 'min' : ''}`}>\r\n      { users.map(user => (\r\n        <li key={user.id} className={`user_list__user ${user.owner ? 'my' : ''}`} >\r\n          <div className=\"user__avatar\"><span>{user.userName[0].toUpperCase()}</span></div>\r\n          <span className=\"user__name\">{ user.userName }</span>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default UserList;\r\n","import React, { FunctionComponent } from 'react';\r\nimport './MainSideBar.css';\r\nimport UserList from \"./modules/UserList\";\r\n\r\ntype MainSideBarProps = {\r\n\r\n}\r\n\r\nconst MainSideBar: FunctionComponent<MainSideBarProps> = (props) => {\r\n\r\n  return <div className=\"main_sidebar\" >\r\n    <div className=\"main_sidebar__inner main_sidebar__container\">\r\n      <h3 className=\"main_sidebar__title\" >Users</h3>\r\n      <UserList />\r\n    </div>\r\n  </div>;\r\n}\r\n\r\nexport default MainSideBar;\r\n","import React, { FunctionComponent } from 'react';\r\nimport MessagesList from \"../MessageLisst/MessagesList\";\r\nimport MessageEditor from \"../MessageEditor/MessageEditor\";\r\nimport Window from \"../Window/Window\";\r\nimport './MainWindow.css';\r\nimport MainSideBar from \"../MainSideBar/MainSideBar\";\r\n\r\ntype MainWindowProps = {\r\n\r\n}\r\n\r\nconst MainWindow: FunctionComponent<MainWindowProps> = (props) => {\r\n  return (\r\n    <Window\r\n      className={'main_window'}\r\n      controls\r\n      sideBar={<MainSideBar />}\r\n    >\r\n      <div className=\"main_window__container\">\r\n        <MessagesList />\r\n        <MessageEditor/>\r\n      </div>\r\n    </Window>\r\n  );\r\n}\r\n\r\nexport default MainWindow;\r\n","import React from 'react';\nimport './App.css';\nimport GlobalContext from \"./components/GlobalContext\";\nimport Bg from \"./components/Bg/Bg\";\nimport MainWindow from \"./components/MainWindow/MainWindow\";\n\nfunction App() {\n  return (\n    <GlobalContext>\n      <div className=\"App\">\n        <Bg />\n        <div className=\"app__container\">\n          <MainWindow />\n        </div>\n      </div>\n    </GlobalContext>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}