{"version":3,"sources":["contexts/connection.ts","contexts/messages.ts","hooks/useConnection.ts","components/GlobalContext.tsx","assets/bg.mp4","components/Bg/Bg.tsx","components/MessageLisst/MessagesList.tsx","hooks/useSocketRequests.ts","api/reuests.ts","components/MessageEditor/MessageEditor.tsx","components/Window/Window.tsx","components/MainWindow/MainWindow.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SocketContext","React","createContext","undefined","MessagesContext","useConnection","handlers","useState","socket","setSocket","handleSocket","event","type","JSON","parse","data","console","error","useEffect","onMessage","WebSocket","process","onmessage","log","e","connection","GlobalContext","children","messages","setMessages","message","prevState","Provider","value","Bg","props","className","src","videoSrc","autoPlay","loop","muted","width","height","MessagesList","useContext","map","owner","date","text","id","useSocketRequests","sendMessage","msg","action","send","stringify","sendMessageRequest","MessageEditor","messageText","setMessageText","handleSend","onKeyDown","code","preventDefault","onChange","target","name","cols","rows","onClick","Window","sideBar","controls","containerClassName","toolbar","MainWindow","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.abf7f5aa.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ntype SocketContextType = {\r\n  socket: WebSocket;\r\n}\r\n\r\nexport const SocketContext = React.createContext<SocketContextType>(undefined!);\r\n\r\nexport const connection = (onMessage: (event: any) => void): WebSocket | null => {\r\n  try {\r\n    const socket = new WebSocket(process.env.REACT_APP_SOCKET_URL!);\r\n\r\n    socket.onmessage = onMessage;\r\n\r\n    console.log('Successfully websocket connection:', socket);\r\n    return socket;\r\n  } catch (e) {\r\n    console.log('Something went wrong while websocket connection: ', e);\r\n    // TODO: implement global API Error\r\n    return null;\r\n  }\r\n}","import React  from \"react\";\r\nimport { Message } from \"../Models/Message\";\r\n\r\ntype MessagesContextType = {\r\n  messages: Message[];\r\n}\r\n\r\nexport const MessagesContext = React.createContext<MessagesContextType>(undefined!);\r\n","import { useEffect, useState } from 'react';\r\n\r\nimport { connection } from '../contexts/connection';\r\n\r\n// TODO: Moved request typing to backend\r\ntype RequestsTypes = 'message';\r\n\r\ntype Handlers = {\r\n  [key in RequestsTypes]?: (data: any) => void;\r\n}\r\n\r\ntype EventType = {\r\n  type: RequestsTypes,\r\n  data: any\r\n}\r\n\r\nconst useConnection = (handlers: Handlers) => {\r\n  const [socket, setSocket] = useState<WebSocket | null>(null);\r\n\r\n  const handleSocket = (event: EventType) => {\r\n    if (event.type in handlers) {\r\n      handlers[event.type]!(JSON.parse(event.data));\r\n    } else {\r\n      console.error(`Unhandled socket event type {${event.type}}:`, event);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    setSocket(connection(handleSocket));\r\n  }, []);\r\n\r\n  return socket;\r\n};\r\n\r\nexport default useConnection;","import React, { FunctionComponent, useState } from 'react';\n\nimport { SocketContext } from '../contexts/connection';\nimport { MessagesContext } from '../contexts/messages';\nimport useConnection from '../hooks/useConnection';\nimport { Message } from '../Models/Message';\n\nconst GlobalContext: FunctionComponent = ({ children }) => {\n  const [messages, setMessages] = useState<Message[]>([]);\n\n  const onMessage = (data: Message) => {\n    console.log('Received message:', data);\n    setMessages((prevState) => [...prevState, data]);\n  };\n\n  const socket = useConnection({\n    // TODO: fix any\n    message: onMessage as any,\n  });\n\n  if (!socket) {\n    return <>Loading...</>;\n  }\n\n  return (\n    <SocketContext.Provider value={{ socket: socket }}>\n      <MessagesContext.Provider value={{ messages }}>\n        {children}\n      </MessagesContext.Provider>\n    </SocketContext.Provider>\n  );\n};\n\nexport default GlobalContext;\n","export default __webpack_public_path__ + \"static/media/bg.8283151c.mp4\";","import React, { FunctionComponent } from 'react';\r\nimport './Bg.css';\r\n//@ts-ignore\r\nimport videoSrc from '../../assets/bg.mp4';\r\n\r\ntype BgProps = {\r\n\r\n}\r\n\r\nconst Bg: FunctionComponent<BgProps> = (props) => {\r\n  return <video\r\n    className=\"live_bg\"\r\n    src={videoSrc}\r\n    autoPlay={true}\r\n    loop={true}\r\n    muted={true}\r\n    width=\"100%\"\r\n    height=\"100%\"\r\n  />;\r\n}\r\n\r\nexport default Bg;\r\n","import React, { FunctionComponent, useContext } from 'react';\nimport { MessagesContext } from '../../contexts/messages';\nimport './MessageList.css';\n\ntype MessagesListProps = {};\n\nconst MessagesList: FunctionComponent<MessagesListProps> = (props) => {\n  const { messages } = useContext(MessagesContext);\n\n  return <ul className=\"messages_list\">{\n    messages.map(message => (\n      <li className={`${message?.owner ? 'my' : '' }`} key={message.id} >[{message.date}]: { message.text }</li>\n    ))\n  }</ul>;\n};\n\nexport default MessagesList;\n","import { useContext } from 'react';\r\n\r\nimport { SocketContext } from '../contexts/connection';\r\nimport { sendMessage as sendMessageRequest } from '../api/reuests';\r\n\r\nconst useSocketRequests = () => {\r\n  const { socket } = useContext(SocketContext);\r\n\r\n  const sendMessage = (message: string) => {\r\n    sendMessageRequest(socket, { message });\r\n  }\r\n\r\n  return {\r\n    sendMessage\r\n  }\r\n}\r\n\r\nexport default useSocketRequests;","import { Message } from '@webchat_test/messages';\n\ntype SocketRequest<Data> = (socket: WebSocket, data: Data) => unknown;\n\nexport const sendMessage: SocketRequest<{ message: Message['text'] }> = (\n  socket: WebSocket,\n  { message }\n) => {\n  const msg = {\n    action: 'sendmessage',\n    text: message,\n  };\n\n  socket.send(JSON.stringify(msg));\n};\n","import React, { ChangeEvent, FunctionComponent, useState } from 'react';\r\nimport useSocketRequests from \"../../hooks/useSocketRequests\";\r\nimport './MessageEditor.css';\r\n\r\ntype MessageEditorProps = {\r\n\r\n}\r\n\r\nconst MessageEditor: FunctionComponent<MessageEditorProps> = (props) => {\r\n  const [messageText, setMessageText] = useState('');\r\n  const { sendMessage } = useSocketRequests();\r\n\r\n  const handleChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    setMessageText(e.target.value);\r\n  }\r\n\r\n  const handleSend = () => {\r\n    setMessageText('');\r\n    sendMessage(messageText);\r\n  }\r\n\r\n  const handleKey = (event: any) => {\r\n    if (event.code === 'Enter') {\r\n      handleSend();\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  return <div className={'message_editor_container'}>\r\n    <textarea\r\n      onKeyDown={handleKey}\r\n      value={messageText}\r\n      onChange={handleChange}\r\n      name=\"msg_editor\"\r\n      id=\"msg_editor_textarea\"\r\n      cols={30}\r\n      rows={10}\r\n    />\r\n    <button onClick={handleSend} className=\"message_editor__send_button\" />\r\n  </div>;\r\n}\r\n\r\nexport default MessageEditor;\r\n","import React, { CSSProperties, FunctionComponent } from 'react';\r\nimport './Window.css';\r\n\r\ntype WindowProps = {\r\n  controls?: boolean;\r\n  toolbar?: React.ReactNode;\r\n  sideBar?: React.ReactNode;\r\n  className?: string\r\n  width?: CSSProperties['width'],\r\n  height?: CSSProperties['height'],\r\n  containerClassName?: string\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst Window: FunctionComponent<WindowProps> = (props) => {\r\n  const {\r\n    className,\r\n    children,\r\n    sideBar,\r\n    containerClassName,\r\n    controls,\r\n    toolbar\r\n  } = props;\r\n\r\n  return <div className={`window ${className || ''}`}>\r\n    <div className=\"window__header\">\r\n        { controls && <div className=\"window__controls\" />}\r\n        { toolbar || null }\r\n    </div>\r\n    <div className='window__inner' >\r\n      { sideBar && (\r\n        <div className=\"window__sidebar\">\r\n          {sideBar}\r\n        </div>\r\n      )}\r\n      <div className=\"window__content\">\r\n        {children}\r\n      </div>\r\n    </div>\r\n  </div>;\r\n}\r\n\r\nexport default Window;\r\n","import React, { FunctionComponent } from 'react';\r\nimport MessagesList from \"../MessageLisst/MessagesList\";\r\nimport MessageEditor from \"../MessageEditor/MessageEditor\";\r\nimport Window from \"../Window/Window\";\r\nimport './MainWindow.css';\r\n\r\ntype MainWindowProps = {\r\n\r\n}\r\n\r\nconst MainWindow: FunctionComponent<MainWindowProps> = (props) => {\r\n  return <Window className={'main_window'} controls >\r\n    <div className=\"main_window__container\">\r\n      <MessagesList />\r\n      <MessageEditor/>\r\n    </div>\r\n  </Window>;\r\n}\r\n\r\nexport default MainWindow;\r\n","import React from 'react';\nimport './App.css';\nimport GlobalContext from \"./components/GlobalContext\";\nimport Bg from \"./components/Bg/Bg\";\nimport MainWindow from \"./components/MainWindow/MainWindow\";\n\nfunction App() {\n  return (\n    <GlobalContext>\n      <div className=\"App\">\n        <Bg />\n        <div className=\"app__container\">\n          <MainWindow />\n        </div>\n      </div>\n    </GlobalContext>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}