{"version":3,"sources":["img/Eni-min.svg","Components/LevelCreater/RoundCreater/RoundTypeSelect/index.jsx","Components/LevelCreater/RoundCreater/index.jsx","funcs.js","hooks.js","Components/LevelCreater/index.jsx","defaultLevels.js","Components/Header/index.jsx","Components/LevelCard/index.jsx","Components/LevelsList/index.jsx","Components/RightBar/index.js","Components/Pages/PageMain/index.jsx","Components/LevelHeader/index.jsx","Components/RoundWindow/index.jsx","Components/Pages/PageLevel/index.jsx","index.js","Components/App/index.jsx"],"names":["module","exports","__webpack_require__","p","RoundTypeSelect","props","_useState","useState","_useState2","Object","slicedToArray","isOpen","setIsOpen","react_default","a","createElement","className","concat","onClick","e","preventDefault","mode","filter","el","map","key","changeMode","roundId","RoundCreater","questionHref","React","createRef","answerHrefs","type","placeholder","value","question","onChange","changeQuestion","current","ref","answer","id","push","answerId","text","toLowerCase","changeAnswer","style","background-color","color","addAnswer","randomInteger","min","max","rand","Math","random","round","getCookie","name","matches","document","cookie","match","RegExp","decodeURIComponent","undefined","setCookie","date","Date","setDate","getDate","toUTCString","Round","newId","newText","newAnswer","newMode","classCallCheck","this","useLevelCtreater","title","setTitle","_useState3","_useState4","description","setDescription","_useState5","_useState6","rounds","setRounds","titleRef","descriptionRef","changer","rId","newRounds","slice","ans","ansId","addater","length","alert","newLevel","addLevel","usePageLevel","_useState7","_useState8","roundSelected","setRoundSelected","_useState9","_useState10","roundsCompleted","setRoundsCompleted","_useState11","_useState12","score","setScore","_useState13","_useState14","err","setErr","_useState15","_useState16","right","setRight","_useState17","startTime","exitLevel","JSON","stringify","levelName","error","speed","completed","getMonth","getHours","getMinutes","endLevel","find","selectedNow","nextRoundId","indexOf","changes","console","log","setTimeout","LevelCreater","_useLevelCtreater","_useLevelCtreater2","addator","create","levelCreaterToggle","action","defaultLevels","Header","src","require","alt","LevelCard","deleteSelf","deleteCard","target","startLevel","LevelsList","levels","elem","RightBar","statistic","parse","PageMain","setLevels","levelCreater","setLevelCreater","cardId","newLevels","aria-label","LevelHeader","width","RoundWindow","buttonActive","setButtonActive","exitMode","setExitMode","show","setShow","roundInput","useEffect","checkAnswer","getAnswer","replace","trim","changeScore","getElementsByClassName","buttonActivate","buttonText","buttonClassName","Transition","in","timeout","onExited","goNextRound","state","animationClassName","onSubmit","PageLevel","_usePageLevel","_usePageLevel2","ReactDOM","render","goPage","page","setSelectedPage","pageMain","levelData","newPage","selectedPage","getElementById"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,obCIzB,SAASC,EAAiBC,GAAO,IAAAC,EAChBC,oBAAS,GADOC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACrCK,EADqCH,EAAA,GAC7BI,EAD6BJ,EAAA,GAS5C,OACIK,EAAAC,EAAAC,cAAA,OAAKC,UAAS,6BAAAC,OAAgCN,EAAQ,SAAS,KAC3DE,EAAAC,EAAAC,cAAA,UAAQG,QAPC,SAAAC,GACbA,EAAEC,iBACFR,GAAWD,KAKsBE,EAAAC,EAAAC,cAAA,YAAOV,EAAMgB,MAAYR,EAAAC,EAAAC,cAAA,KAAGC,UAAS,kBAAAC,OAAqBN,EAAU,OAAS,YACxGA,EAASE,EAAAC,EAAAC,cAAA,UAVH,CAAC,QAAS,UAWJO,OAAO,SAAAC,GAAE,OAAEA,IAAKlB,EAAMgB,OAC3BG,IAAI,SAAAD,GAAE,OAAEV,EAAAC,EAAAC,cAAA,MAAIU,IAAKF,EAAIL,QAAS,WAC3Bb,EAAMqB,WAAWrB,EAAMsB,QAASJ,GAChCX,GAAWD,KACXY,MACL,UCjBJ,SAASK,EAAavB,GAGjC,IAAIwB,EAAeC,IAAMC,YACrBC,EAAc,GAelB,OACInB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAACX,EAAD,CAAiBiB,KAAMhB,EAAMgB,KAAMK,WAAYrB,EAAMqB,WAAYC,QAAStB,EAAMsB,UAChFd,EAAAC,EAAAC,cAAA,SACIC,UAAU,sBACViB,KAAK,OACLC,YAAY,uCACZC,MAAO9B,EAAM+B,SACbC,SAhBZ,WACIhC,EAAMiC,eAAejC,EAAMsB,QAASE,EAAaU,QAAQJ,QAgBjDK,IAAKX,IAGLxB,EAAMoC,OAAOjB,IAAI,SAACiB,EAAOC,GAErB,OADAV,EAAYW,KAAKb,IAAMC,aAEflB,EAAAC,EAAAC,cAAA,SACIC,UAAU,sBACVS,IAAG,GAAAR,OAAKZ,EAAMsB,QAAX,KAAAV,OAAsByB,GACzBT,KAAK,OACLC,YAAW,GAAAjB,OAAmB,WAAbZ,EAAMgB,MAAsB,IAALqB,EACpC,8FACc,WAAbrC,EAAMgB,KAAP,yFAAAJ,OACuByB,EAAG,GAD1B,wCAAAzB,OAEcyB,EAAG,IACrBP,MAAOM,EACPJ,SAAU,kBA9BtC,SAAsBO,GAClB,IAAMC,EAAOb,EAAYY,GAAUL,QAAQJ,MAAMW,cACjDzC,EAAM0C,aAAa1C,EAAMsB,QAASiB,EAAUC,GA4BNE,CAAaL,IAC3BF,IAAKR,EAAYU,GACjBM,MAAqB,WAAb3C,EAAMgB,MAAsB,IAALqB,EAAQ,CAACO,mBAAmB,UAAUC,MAAQ,WAAW,OAK5GrC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,wBAAwBE,QA7ClD,SAAmBC,GACfA,EAAEC,iBACFf,EAAM8C,UAAU9C,EAAMsB,WA2C4Cd,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oCCxDvF,SAASoC,EAAcC,EAAKC,GACxB,IAAIC,EAAOF,EAAM,GAAMG,KAAKC,UAAYH,EAAMD,EAAM,GAEpD,OADAE,EAAOC,KAAKE,MAAMH,GAMtB,SAASI,EAAUC,GACf,IAAIC,EAAUC,SAASC,OAAOC,MAAM,IAAIC,OAEpC,WAAaL,EAAO,aAExB,OAAOC,EAAUK,mBAAmBL,EAAQ,SAAMM,EAGtD,SAASC,EAAUL,EAAQ5B,GACvB,IAAIkC,EAAO,IAAIC,KACfD,EAAKE,QAAQF,EAAKG,UAAY,KAC9BH,EAAOA,EAAKI,cACZX,SAASC,OAAT,GAAA9C,OAAqB8C,EAArB,KAAA9C,OAA+BkB,EAA/B,oBAAAlB,OAAuDoD,OCjBrDK,EACF,SAAAA,EAAYC,EAAOC,EAASC,EAAWC,GAAUrE,OAAAsE,EAAA,EAAAtE,CAAAuE,KAAAN,GAAAM,KAMjDtC,GAAK,EAN2CsC,KAOhDnC,KAAM,GAP0CmC,KAQhDvC,OAAS,CAAC,IARsCuC,KAShD3D,KAAO,QARH2D,KAAKtC,GAAKiC,GAASK,KAAKtC,GACxBsC,KAAKnC,KAAO+B,GAAWI,KAAKnC,KAC5BmC,KAAKvC,OAASoC,GAAaG,KAAKvC,OAChCuC,KAAK3D,KAAOyD,GAAWE,KAAK3D,MAQ9B4D,EAAmB,SAAA5E,GAAS,IAAAC,EACJC,mBAAS,IADLC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACvB4E,EADuB1E,EAAA,GAChB2E,EADgB3E,EAAA,GAAA4E,EAEQ7E,mBAAS,IAFjB8E,EAAA5E,OAAAC,EAAA,EAAAD,CAAA2E,EAAA,GAEvBE,EAFuBD,EAAA,GAEVE,EAFUF,EAAA,GAAAG,EAGFjF,mBAAS,CAAC,IAAImE,IAHZe,EAAAhF,OAAAC,EAAA,EAAAD,CAAA+E,EAAA,GAGvBE,EAHuBD,EAAA,GAGfE,EAHeF,EAAA,GAKxBG,EAAW9D,IAAMC,YACjB8D,EAAiB/D,IAAMC,YA8DvB+D,EAAU,CACZZ,MA/CgB,WAChBC,EAASS,EAASrD,QAAQJ,QA+C1BmD,YA5CsB,WACtBC,EAAeM,EAAetD,QAAQJ,QA4CtCC,SAzCmB,SAACT,EAASkB,GAC7B8C,EAAUD,EAAOlE,IAAI,SAACkC,EAAMqC,GAIxB,OAHIA,IAAQpE,IACR+B,EAAMb,KAAOA,GAEVa,MAqCXjB,OAjCiB,SAACd,EAASiB,EAAUC,GACrC,IAAImD,EAAYN,EAAOO,QAEvBD,EAAYA,EAAUxE,IAAI,SAACkC,EAAMqC,GAU7B,OATIA,IAAQpE,IACR+B,EAAMjB,OAASiB,EAAMjB,OAAOjB,IAAI,SAAC0E,EAAKC,GAClC,OAAIA,IAAUvD,EACHC,EAEAqD,KAIZxC,IAGXiC,EAAUK,EAAUC,UAkBpB5E,KAfe,SAACM,EAASmD,GACzBa,EAAUD,EAAOlE,IAAI,SAACkC,EAAOqC,GAKzB,OAJIA,IAAQpE,IACR+B,EAAMrC,KAAOyD,GAGVpB,OAYT0C,EAAU,CACZ1C,MArEa,SAACvC,GACdA,EAAEC,iBACFuE,EAAUD,EAAOzE,OAAO,CAAC,IAAIyD,EAAMgB,EAAOW,OAAO,OAoEjD5D,OAjEc,SAACd,GACfgE,EAAUD,EAAOlE,IAAI,SAACkC,EAAMhB,GAIxB,OAHIA,IAAOf,GACP+B,EAAMjB,OAAOE,KAAK,IAEfe,OA4Ef,MAAO,CACHwB,EAAOI,EAAaI,EACpBU,EACAN,EAhBW,SAAC3E,GAEZ,GADAA,EAAEC,iBACEsE,EAAOW,QAAU,EACjB,OAAOC,MAAM,sNACjB,IAAIC,EAAW,CACX7D,GAAI,OACJkB,KAAMsB,GAAS,UACfI,YAAaA,EACbI,OAAQA,GAEZrF,EAAMmG,SAASD,IAQfX,EAAUC,IAIZY,EAAe,SAACpG,GAAU,IAAAqG,EACcnG,mBAAS,GADvBoG,EAAAlG,OAAAC,EAAA,EAAAD,CAAAiG,EAAA,GACrBE,EADqBD,EAAA,GACNE,EADMF,EAAA,GAAAG,EAEkBvG,mBAAS,IAF3BwG,EAAAtG,OAAAC,EAAA,EAAAD,CAAAqG,EAAA,GAErBE,EAFqBD,EAAA,GAEJE,EAFIF,EAAA,GAAAG,EAGF3G,mBAAS,GAHP4G,EAAA1G,OAAAC,EAAA,EAAAD,CAAAyG,EAAA,GAGrBE,EAHqBD,EAAA,GAGdE,EAHcF,EAAA,GAAAG,EAIN/G,mBAAS,GAJHgH,EAAA9G,OAAAC,EAAA,EAAAD,CAAA6G,EAAA,GAIrBE,EAJqBD,EAAA,GAIhBE,EAJgBF,EAAA,GAAAG,EAKFnH,mBAAS,GALPoH,EAAAlH,OAAAC,EAAA,EAAAD,CAAAiH,EAAA,GAKrBE,EALqBD,EAAA,GAKdE,EALcF,EAAA,GAAAG,EAMRvH,mBAAS,IAAI+D,MAA1ByD,EANqBtH,OAAAC,EAAA,EAAAD,CAAAqH,EAAA,MAyCtBE,EAAY,WACd,IAAM3D,EAAO,IAAIC,KACjBF,EAAU,gBAAiB6D,KAAKC,UAC5B,CACIC,UAAW9H,EAAMuD,KACjBwE,MAAOZ,EACPI,MAAOA,EAAM,EACbS,OAAQhE,EAAO0D,GAAa,IAC5BO,UAAS,GAAArH,OAAKoD,EAAKkE,WAAW,EAArB,KAAAtH,OAA0BoD,EAAKG,UAA/B,KAAAvD,OAA4CoD,EAAKmE,WAAjD,KAAAvH,OAA+DoD,EAAKoE,iBAGrFpI,EAAMqI,YAGNhF,EAAQrD,EAAMqF,OAAOiD,KAAK,SAACjF,GAAD,OAC1BA,EAAMhB,KAAOkE,IAGjB,MAAO,CACHQ,EAAO1D,EApDQ,SAACkF,GAEhB,IADA,IAAIC,EAAczF,EAAc,EAAG/C,EAAMqF,OAAOW,SACA,IAA1CW,EAAgB8B,QAAQD,IAAuBA,IAAgBD,GACjEC,EAAczF,EAAc,EAAG/C,EAAMqF,OAAOW,QAGhDQ,EAAiBgC,GAEb7B,EAAgBX,SAAWhG,EAAMqF,OAAOW,OAAO,EAC/CY,EAAmB,CAAC2B,IAEpB3B,EAAmBD,EAAgB/F,OAAO2H,KAI9B,SAACG,GAOjB,GANCA,EAAU,EACPlB,EAASD,EAAM,GACfH,EAAOD,EAAI,GAEfwB,QAAQC,IAAIrB,GAERmB,EAAU,GACV,GAAc,IAAV3B,EACA,YAEGA,GAAS,GAChB8B,WAAWlB,EAAW,KAG1BX,EAASD,EAAM2B,YCrJR,SAASI,EAAc9I,GAAO,IAAA+I,EAOrCnE,EAAiB5E,GAPoBgJ,EAAA5I,OAAAC,EAAA,EAAAD,CAAA2I,EAAA,GAErClE,EAFqCmE,EAAA,GAE9B/D,EAF8B+D,EAAA,GAEjB3D,EAFiB2D,EAAA,GAGrCC,EAHqCD,EAAA,GAIrCvD,EAJqCuD,EAAA,GAKrCE,EALqCF,EAAA,GAMrCzD,EANqCyD,EAAA,GAM3BxD,EAN2BwD,EAAA,GASzC,OACIxI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,UAAQG,QAASb,EAAMmJ,mBAAoBxI,UAAU,2BAA2BH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yBAC7FH,EAAAC,EAAAC,cAAA,QAAM0I,OAAO,IAAIzI,UAAU,eACvBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,SACIC,UAAU,qBACVwB,IAAKoD,EACL3D,KAAK,OACLE,MAAO+C,EACPhD,YAAY,gBACZG,SAAUyD,EAAQZ,QAEtBrE,EAAAC,EAAAC,cAAA,SACIC,UAAU,2BACVwB,IAAKqD,EACL5D,KAAK,OACLE,MAAOmD,EACPpD,YAAY,cACZG,SAAUyD,EAAQR,eAItBI,EAAOlE,IAAI,SAACkC,EAAMhB,GAAP,OACP7B,EAAAC,EAAAC,cAACa,EAAD,CACIH,IAAKiB,EACLf,QAASe,EACTN,SAAUsB,EAAMb,KAChBJ,OAAQiB,EAAMjB,OACdpB,KAAMqC,EAAMrC,KACZ8B,UAAWmG,EAAQ7G,OACnBH,eAAgBwD,EAAQ1D,SACxBW,aAAc+C,EAAQrD,OACtBf,WAAYoE,EAAQzE,SAIhCR,EAAAC,EAAAC,cAAA,UAAQC,UAAU,oDAAoDE,QAASoI,EAAQ5F,OAAO7C,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yBAE/GH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,+BAA+BE,QAASqI,GAA1D,yDCOGG,EA/DO,CAClB,CACIhH,GAAI,EACJkB,KAAM,SACN0B,YAAa,wHACbI,OAAQ,CACJ,CACIhD,GAAI,EACJG,KAAM,QACNJ,OAAQ,CAAC,uCAAU,yCAEvB,CACIC,GAAI,EACJG,KAAM,QACNJ,OAAQ,CAAC,mCAEb,CACIC,GAAI,EACJG,KAAM,QACNJ,OAAQ,CAAC,+CAEb,CACIC,GAAI,EACJG,KAAM,OACNJ,OAAQ,CAAC,+CAEb,CACIC,GAAI,EACJG,KAAM,SACNJ,OAAQ,CAAC,yCAEb,CACIC,GAAI,EACJG,KAAM,QACNJ,OAAQ,CAAC,mEAIrB,CACIC,GAAI,EACJkB,KAAM,UACN0B,YAAa,oIACbI,OAAQ,CACJ,CACIhD,GAAI,EACJG,KAAM,MACNJ,OAAQ,CAAC,qBAAO,mCAEpB,CACIC,GAAI,EACJG,KAAM,UACNJ,OAAQ,CAAC,yCAEb,CACIC,GAAI,EACJG,KAAM,OACNJ,OAAQ,CAAC,sCCpDV,SAASkH,EAAQtJ,GAC5B,OACIQ,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAW4I,IAAKC,EAAQ,GAA0BC,IAAI,KACrEjJ,EAAAC,EAAAC,cAAA,MAAIC,UAAW,YAAYH,EAAAC,EAAAC,cAAA,qBAA3B,2BCHG,SAASgJ,EAAW1J,GAC/B,IAAM2J,EAAa,WACf3J,EAAM4J,WAAW5J,EAAMqC,KAa3B,OACI7B,EAAAC,EAAAC,cAAA,MAAIC,UAAW,YAAaE,QAXb,SAACC,GAChB,GAA0B,iCAAvBA,EAAE+I,OAAOlJ,UACR,OAAOgJ,IAEX3J,EAAM8J,WAAW,CACbvG,KAAMvD,EAAMuD,KACZ8B,OAAQrF,EAAMqF,WAMd7E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBAEjBH,EAAAC,EAAAC,cAAA,MAAIC,UAAW,mBAAoBX,EAAMuD,MACzC/C,EAAAC,EAAAC,cAAA,KAAGC,UAAW,0BAA2BX,EAAMiF,aAC/CzE,EAAAC,EAAAC,cAAA,KACIC,UAAU,+BACVE,QAAS8I,KCtBV,SAASI,EAAY/J,GAahC,OACIQ,EAAAC,EAAAC,cAAA,MAAIC,UAAW,cACMX,EAAMgK,OAdK7I,IAAI,SAAA8I,GAAI,OAChCzJ,EAAAC,EAAAC,cAACgJ,EAAD,CACItI,IAAK6I,EAAK5H,GACVA,GAAI4H,EAAK5H,GACTkB,KAAM0G,EAAK1G,KACX0B,YAAagF,EAAKhF,YAClBI,OAAQ4E,EAAK5E,OACbyE,WAAY9J,EAAM8J,WAClBF,WAAY5J,EAAM4J,sBCVvB,SAASM,EAAUlK,GAE9B,IAAImK,EAKJ,OAJG7G,EAAU,mBACT6G,EAAYvC,KAAKwC,MAAM9G,EAAU,mBAIjC9C,EAAAC,EAAAC,cAAA,WAASC,UAAU,aACfH,EAAAC,EAAAC,cAAA,iCACGyJ,EAMC3J,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yBAAyBwJ,EAAUrC,WAChDtH,EAAAC,EAAAC,cAAA,mBAAAE,OAAcuJ,EAAUpC,QACxBvH,EAAAC,EAAAC,cAAA,mBAAAE,OAAcuJ,EAAU5C,QACxB/G,EAAAC,EAAAC,cAAA,mBAAAE,OAAcuJ,EAAUnC,MAAxB,OACAxH,EAAAC,EAAAC,cAAA,0BAAAE,OAAqBuJ,EAAUlC,aAVnCzH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiB4I,IAAKC,EAAQ,GAA0BC,IAAI,QAC3EjJ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yBAAb,eCLL,SAAS0J,EAAUrK,GACzBsD,EAAU,YACXqF,QAAQC,IAAI,2SACZ7E,EAAU,SAAU6D,KAAKC,UAAUwB,KAHF,IAAApJ,EAMTC,mBAAS0H,KAAKwC,MAAM9G,EAAU,YANrBnD,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAM9B+J,EAN8B7J,EAAA,GAMtBmK,EANsBnK,EAAA,GAAA4E,EAOG7E,oBAAS,GAPZ8E,EAAA5E,OAAAC,EAAA,EAAAD,CAAA2E,EAAA,GAO9BwF,EAP8BvF,EAAA,GAOhBwF,EAPgBxF,EAAA,GAe/BmE,EAAqB,WACvBqB,GAAiBD,IAYrB,OACI/J,EAAAC,EAAAC,cAAA,OAAKC,UAAW,YACXH,EAAAC,EAAAC,cAAC4I,EAAD,MACA9I,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACqJ,EAAD,CACIC,OAAQA,EACRF,WAAY9J,EAAM8J,WAClBF,WA3BF,SAACa,GAChB,IAAIC,EAAYV,EAAO/I,OAAO,SAAAgJ,GAAI,OAAIA,EAAK5H,KAAOoI,IAClD1G,EAAU,SAAU6D,KAAKC,UAAU6C,IACnCJ,EAAUI,MA0BGlK,EAAAC,EAAAC,cAAA,UACIC,UAAU,mCACVgK,aAAW,qGACX9J,QAASsI,GAET3I,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yBAGrBH,EAAAC,EAAAC,cAACwJ,EAAD,OAEHK,EAAc/J,EAAAC,EAAAC,cAACoI,EAAD,CAAcK,mBAAoBA,EAAoBhD,SA7B7D,SAACD,GACdA,EAAS7D,GAAK2H,EAAOhE,OAAO,EAC5B,IAAI0E,EAAYV,EAAOpE,QACvB8E,EAAUpI,KAAK4D,GACfnC,EAAU,SAAU6D,KAAKC,UAAU6C,IACnCJ,EAAUI,GACVF,GAAgB,MAuBiF,gBC1D1F,SAASI,EAAa5K,GAEjC,IAAM+G,EAAQ/G,EAAM+G,MAEpB,OACIvG,EAAAC,EAAAC,cAAA,UAAQC,UAAU,gBACdH,EAAAC,EAAAC,cAAA,UAAKV,EAAM8H,WACXtH,EAAAC,EAAAC,cAAA,MAAIC,UAAW,iBAAf,UAAAC,OAA2CmG,IAC3CvG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAYH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBgC,MAAO,CAACkI,MAAA,GAAAjK,OAAmB,GAARmG,EAAX,4BCNjE,SAAS+D,EAAa9K,GAAO,IAAAC,EACAC,oBAAS,GADTC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACjC8K,EADiC5K,EAAA,GACnB6K,EADmB7K,EAAA,GAAA4E,EAER7E,mBAAS,eAFD8E,EAAA5E,OAAAC,EAAA,EAAAD,CAAA2E,EAAA,GAEjCkG,EAFiCjG,EAAA,GAEvBkG,EAFuBlG,EAAA,GAAAG,EAGhBjF,oBAAS,GAHOkF,EAAAhF,OAAAC,EAAA,EAAAD,CAAA+E,EAAA,GAGjCgG,EAHiC/F,EAAA,GAG3BgG,EAH2BhG,EAAA,GAKlCiG,EAAa5J,IAAMC,YAEzB4J,oBAAU,WACNF,GAAQ,IACT,IAEH,IAKMG,EAAc,SAACzK,GACjBA,EAAEC,iBACF,IAAIqB,EAASoJ,IAAY1J,MAAM2J,QAAQ,UAAW,KAAKC,OAAOjJ,cAE1DzC,EAAMoC,OAAOkG,KAAM,SAACpH,GAAD,OAASA,IAAOkB,KACnCpC,EAAM2L,YAAY,GAElBT,EAAY,kBAEZlL,EAAM2L,aAAa,GACnBT,EAAY,gBAGhBE,GAAQ,IAGNI,EAAY,WACd,OAAO/H,SAASmI,uBAAuB,sBAAsB,IAG3DC,EAAiB,WACfL,IAAY1J,MACZkJ,GAAgB,GAEhBA,GAAgB,IAIlBxI,EAAOxC,EAAMwC,KACbsJ,EAAaf,EAAc,yDAAa,+DACxCgB,EAAkBhB,EACpB,iDACA,sBAEJ,OACIvK,EAAAC,EAAAC,cAACsL,EAAA,EAAD,CACIC,GAAId,EACJe,QAAS,EAETC,SACI,WA5CRnB,GAAgB,GAChBK,EAAWnJ,QAAQJ,MAAQ,GA6Cf+G,WAAW,WACPqC,EAAY,eACZE,GAAQ,GACRpL,EAAMoM,YAAYpM,EAAMsB,UAC1B,OAIT,SAAC+K,GACE,IAAMC,EAAkB,GAAA1L,OAAMqK,EAAN,KAAArK,OAAkByL,GAE1C,OACI7L,EAAAC,EAAAC,cAAA,OAAKC,UAAS,eAAAC,OAAiB0L,IAC3B9L,EAAAC,EAAAC,cAAA,KAAGC,UAAW,qBAAuB6B,GACrChC,EAAAC,EAAAC,cAAA,QAAM0I,OAAO,IAAImD,SAAUhB,GACvB/K,EAAAC,EAAAC,cAAA,SACIkB,KAAK,OACLjB,UAAW,qBACXqB,SAAU6J,EACV1J,IAAKkJ,IAET7K,EAAAC,EAAAC,cAAA,SACIkB,KAAK,SACLE,MAAOgK,EACPnL,UAAWoL,QC/E5B,SAASS,EAAWxM,GAAO,IAAAyM,EAMlCrG,EAAapG,GANqB0M,EAAAtM,OAAAC,EAAA,EAAAD,CAAAqM,EAAA,GAGlC1F,EAHkC2F,EAAA,GAG3BrJ,EAH2BqJ,EAAA,GAIlCN,EAJkCM,EAAA,GAKlCf,EALkCe,EAAA,GAStC,OACIlM,EAAAC,EAAAC,cAAA,OAAKC,UAAW,aACZH,EAAAC,EAAAC,cAACkK,EAAD,CAAa9C,UAAW9H,EAAMuD,KAAMwD,MAAOA,IAE3CvG,EAAAC,EAAAC,cAACoK,EAAD,CACItI,KAAMa,EAAMb,KACZJ,OAAQiB,EAAMjB,OACdd,QAAS+B,EAAMhB,GACf+J,YAAaA,EACbT,YAAaA,KCtB7BgB,IAASC,OAAOpM,EAAAC,EAAAC,cCGD,SAAcV,GACzB,IAAM6M,EAAS,SAACC,GACZC,EAAgBD,IAGdzE,EAAW,WACbwE,EAAOG,IAcPA,EAAWxM,EAAAC,EAAAC,cAAC2J,EAAD,CAAUP,WAXN,SAAAmD,GACf,IAAMC,EAAU1M,EAAAC,EAAAC,cAAC8L,EAAD,CACZjJ,KAAM0J,EAAU1J,KAChB8B,OAAQ4H,EAAU5H,OAClBwH,OAAQA,EACRxE,SAAUA,IAGdwE,EAAOK,MAjBqBjN,EAsBQC,mBAAS8M,GAtBjB7M,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAsBzBkN,EAtByBhN,EAAA,GAsBX4M,EAtBW5M,EAAA,GAwBhC,OAAOgN,GD3BK,MAAQ1J,SAAS2J,eAAe","file":"static/js/main.76c6d74e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Eni-min.95eae398.svg\";","import React, {useState} from 'react';\r\n\r\nimport './style.css';\r\n\r\nexport default function RoundTypeSelect (props) {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    let roundMods = [\"Write\", \"Select\"];\r\n\r\n    let toggleView = e => {\r\n        e.preventDefault();\r\n        setIsOpen(!isOpen);\r\n    };\r\n\r\n    return (\r\n        <div className={`create-round__type_select ${(isOpen? \"opened\":\"\")}`}>\r\n            <button onClick={toggleView}><span>{props.mode}</span><i className={`fas fa-chevron-${(isOpen) ? \"left\" : \"right\"}`}/></button>\r\n            {(isOpen)? <ul>{\r\n                roundMods.filter(el=>el!==props.mode)\r\n                    .map(el=><li key={el} onClick={()=>{\r\n                        props.changeMode(props.roundId, el);\r\n                        setIsOpen(!isOpen);\r\n                    }}>{el}</li>)\r\n            }</ul>:\"\"}\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport RoundTypeSelect from './RoundTypeSelect';\r\n\r\nimport './style.css';\r\n\r\nexport default function RoundCreater(props) {\r\n\r\n\r\n    let questionHref = React.createRef();\r\n    let answerHrefs = [];\r\n\r\n    function addAnswer(e) {\r\n        e.preventDefault();\r\n        props.addAnswer(props.roundId);\r\n    }\r\n\r\n    function changeQuestion() {\r\n        props.changeQuestion(props.roundId, questionHref.current.value);\r\n    }\r\n    function changeAnswer(answerId) {\r\n        const text = answerHrefs[answerId].current.value.toLowerCase();\r\n        props.changeAnswer(props.roundId, answerId, text);\r\n    }\r\n\r\n    return(\r\n        <div className=\"create-round-wrapper\">\r\n            <RoundTypeSelect mode={props.mode} changeMode={props.changeMode} roundId={props.roundId}/>\r\n            <input\r\n                className='create-round__input'\r\n                type=\"text\"\r\n                placeholder=\"Вопрос\"\r\n                value={props.question}\r\n                onChange={changeQuestion}\r\n                ref={questionHref}\r\n            />\r\n            {\r\n                props.answer.map((answer,id) => {\r\n                    answerHrefs.push(React.createRef());\r\n                    return(\r\n                            <input\r\n                                className='create-round__input'\r\n                                key={`${props.roundId}-${id}`}\r\n                                type=\"text\"\r\n                                placeholder={`${(props.mode===\"Select\"&&id===0)?\r\n                                    \"Правильный ответ\":\r\n                                    (props.mode===\"Select\")?\r\n                                        `Вариант ответа №${id+1}`:\r\n                                        `Ответ №${id+1}`}`}\r\n                                value={answer}\r\n                                onChange={()=>changeAnswer(id)}\r\n                                ref={answerHrefs[id]}\r\n                                style={(props.mode===\"Select\"&&id===0)?{\"background-color\":\"#9cffc8\",\"color\":\"#3e3f3b\"}:{}}\r\n                            />\r\n                        )\r\n                })\r\n            }\r\n            <button className=\"create-round__add-btn\" onClick={addAnswer}><i className=\"far fa-plus-square\"></i></button>\r\n        </div>\r\n    );\r\n}","function randomInteger(min, max) {\r\n    let rand = min - 0.5 + Math.random() * (max - min + 1);\r\n    rand = Math.round(rand);\r\n    return rand;\r\n}\r\n\r\n//-----cookies\r\n// возвращает cookie с именем name, если есть, если нет, то undefined\r\nfunction getCookie(name) {\r\n    let matches = document.cookie.match(new RegExp(\r\n        //\"(?:^|; )\" + name.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, '\\\\$1') + \"=([^;]*)\"\r\n        \"(?:^|; )\" + name + \"=([^;]*)\"\r\n    ));\r\n    return matches ? decodeURIComponent(matches[1]) : undefined;\r\n}\r\n\r\nfunction setCookie(cookie, value) {\r\n    let date = new Date();\r\n    date.setDate(date.getDate() + 365);\r\n    date = date.toUTCString();\r\n    document.cookie = `${cookie}=${value};path=/;expires=${date}`;\r\n}\r\n\r\nfunction deleteCookie(cookie) {\r\n    let date = new Date(0).toUTCString();\r\n    document.cookie = `${cookie}=;path=/;expires=${date}`\r\n}\r\n\r\nexport { randomInteger, getCookie, setCookie, deleteCookie }","import React, { useState }from 'react';\r\nimport {randomInteger, setCookie} from \"./funcs\";\r\n\r\nclass Round {\r\n    constructor(newId, newText, newAnswer, newMode) {\r\n        this.id = newId || this.id;\r\n        this.text = newText || this.text;\r\n        this.answer = newAnswer || this.answer;\r\n        this.mode = newMode || this.mode\r\n    }\r\n    id = 1;\r\n    text ='';\r\n    answer = [''];\r\n    mode = \"Write\";\r\n}\r\n\r\nconst useLevelCtreater = props => {\r\n    const [title, setTitle] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [rounds, setRounds] = useState([new Round()]);\r\n\r\n    const titleRef = React.createRef();\r\n    const descriptionRef = React.createRef();\r\n\r\n    const addRound = (e) => {\r\n        e.preventDefault();\r\n        setRounds(rounds.concat([new Round(rounds.length+1)]));\r\n    };\r\n\r\n    const addAnswer = (roundId) => {\r\n        setRounds(rounds.map((round,id) => {\r\n            if (id === roundId){\r\n                round.answer.push('');\r\n            }\r\n            return round\r\n        }));\r\n    };\r\n\r\n    const changeTitle = () => {\r\n        setTitle(titleRef.current.value);\r\n    };\r\n\r\n    const changeDescription = () => {\r\n        setDescription(descriptionRef.current.value);\r\n    };\r\n\r\n    const changeQuestion = (roundId, text) => {\r\n        setRounds(rounds.map((round,rId) => {\r\n            if (rId === roundId) {\r\n                round.text = text\r\n            }\r\n            return round;\r\n        }));\r\n    };\r\n\r\n    const changeAnswer = (roundId, answerId, text) => {\r\n        let newRounds = rounds.slice();\r\n\r\n        newRounds = newRounds.map((round,rId) => {\r\n            if (rId === roundId) {\r\n                round.answer = round.answer.map((ans, ansId) => {\r\n                    if (ansId === answerId) {\r\n                        return text;\r\n                    } else {\r\n                        return ans;\r\n                    }\r\n                });\r\n            }\r\n            return round;\r\n        });\r\n\r\n        setRounds(newRounds.slice());\r\n    };\r\n\r\n    const changeMode = (roundId, newMode) => {\r\n        setRounds(rounds.map((round, rId) => {\r\n            if (rId === roundId) {\r\n                round.mode = newMode;\r\n            }\r\n\r\n            return round;\r\n        }));\r\n    };\r\n\r\n    const changer = {\r\n        title: changeTitle,\r\n        description: changeDescription,\r\n        question: changeQuestion,\r\n        answer: changeAnswer,\r\n        mode: changeMode\r\n    };\r\n\r\n    const addater = {\r\n        round: addRound,\r\n        answer: addAnswer\r\n    };\r\n\r\n    const create = (e) => {\r\n        e.preventDefault();\r\n        if (rounds.length <= 2)\r\n            return alert('В уровне должно быть больше двух раундов');\r\n        let newLevel = {\r\n            id: 'none',\r\n            name: title || 'MyLevel',\r\n            description: description,\r\n            rounds: rounds\r\n        };\r\n        props.addLevel(newLevel);\r\n    };\r\n\r\n    return [\r\n        title, description, rounds,\r\n        addater,\r\n        changer,\r\n        create,\r\n        titleRef, descriptionRef\r\n    ]\r\n};\r\n\r\nconst usePageLevel = (props) => {\r\n    const [roundSelected, setRoundSelected] = useState(1);\r\n    const [roundsCompleted, setRoundsCompleted] = useState([]);\r\n    const [score, setScore] = useState(0);\r\n    const [err, setErr] = useState(0);\r\n    const [right, setRight] = useState(0);\r\n    const [startTime] = useState(new Date());\r\n\r\n    const goNextRound =(selectedNow) => {\r\n        let nextRoundId = randomInteger(1, props.rounds.length);\r\n        while(roundsCompleted.indexOf(nextRoundId) !== -1 || nextRoundId === selectedNow){\r\n            nextRoundId = randomInteger(1, props.rounds.length)\r\n        }\r\n\r\n        setRoundSelected(nextRoundId);\r\n\r\n        if (roundsCompleted.length === props.rounds.length-2){\r\n            setRoundsCompleted([selectedNow]);\r\n        } else {\r\n            setRoundsCompleted(roundsCompleted.concat(selectedNow));\r\n        }\r\n    };\r\n\r\n    const changeScore = (changes) => {\r\n        (changes > 0)?\r\n            setRight(right+1):\r\n            setErr(err+1);\r\n\r\n        console.log(right);\r\n\r\n        if (changes < 0){\r\n            if (score === 0) {\r\n                return\r\n            }\r\n        } else if (score >= 9) {\r\n            setTimeout(exitLevel, 1000);\r\n        }\r\n\r\n        setScore(score+changes);\r\n    };\r\n\r\n    const exitLevel = () => {\r\n        const date = new Date();\r\n        setCookie('lastStatistic', JSON.stringify(\r\n            {\r\n                levelName: props.name,\r\n                error: err,\r\n                right: right+1,\r\n                speed: (date - startTime) / 1000,\r\n                completed: `${date.getMonth()+1}.${date.getDate()} ${date.getHours()}:${date.getMinutes()}`\r\n            }\r\n        ));\r\n        props.endLevel();\r\n    };\r\n\r\n    let round = props.rounds.find((round) => (\r\n        round.id === roundSelected)\r\n    );\r\n\r\n    return [\r\n        score, round,\r\n        goNextRound,\r\n        changeScore\r\n    ]\r\n};\r\n\r\nexport { useLevelCtreater, usePageLevel };","import React from 'react';\r\n\r\nimport RoundCreater from \"./RoundCreater\";\r\nimport { useLevelCtreater } from '../../hooks'\r\n\r\nimport './style.css';\r\n\r\n\r\nexport default function LevelCreater (props) {\r\n    const [\r\n        title, description, rounds,\r\n        addator, // has methods for add: round, answer\r\n        changer, // has methods for change: title,description,question,answer\r\n        create,\r\n        titleRef, descriptionRef\r\n    ] = useLevelCtreater(props);\r\n\r\n    return (\r\n        <div className=\"create-window\">\r\n            <button onClick={props.levelCreaterToggle} className='level-creater__exit-btn' ><i className=\"far fa-times-circle\"></i></button>\r\n            <form action=\"#\" className=\"create-form\">\r\n                <div className='level-create__head'>\r\n                    <input\r\n                        className='level-creat__title'\r\n                        ref={titleRef}\r\n                        type=\"text\"\r\n                        value={title}\r\n                        placeholder='Name of level'\r\n                        onChange={changer.title}\r\n                    />\r\n                    <input\r\n                        className='level-creat__description'\r\n                        ref={descriptionRef}\r\n                        type=\"text\"\r\n                        value={description}\r\n                        placeholder='Description'\r\n                        onChange={changer.description}\r\n                    />\r\n                </div>\r\n                {\r\n                    rounds.map((round,id) => (\r\n                        <RoundCreater\r\n                            key={id}\r\n                            roundId={id}\r\n                            question={round.text}\r\n                            answer={round.answer}\r\n                            mode={round.mode}\r\n                            addAnswer={addator.answer}\r\n                            changeQuestion={changer.question}\r\n                            changeAnswer={changer.answer}\r\n                            changeMode={changer.mode}\r\n                        />\r\n                    ))\r\n                }\r\n                <button className=\"create-round__add-btn create-round__add-round-btn\" onClick={addator.round}><i className=\"far fa-plus-square\"></i></button>\r\n            </form>\r\n            <button className=\"create-window__create-button\" onClick={create}>Создать</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n// export default class LevelCreater extends Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//\r\n//         this.state = {\r\n//             title:'',\r\n//             description:'',\r\n//             rounds: [\r\n//                 {\r\n//                     id: 1,\r\n//                     text: '',\r\n//                     answer: ['']\r\n//                 }\r\n//             ]\r\n//         };\r\n//\r\n//         this.titleRef = React.createRef();\r\n//         this.descriptionRef = React.createRef();\r\n//     }\r\n//\r\n//     addRound = (e) => {\r\n//         e.preventDefault();\r\n//         this.setState(oldState => {\r\n//             return {\r\n//                 rounds: oldState.rounds.concat([{\r\n//                     id: oldState.rounds.length+1,\r\n//                     text: '',\r\n//                     answer: ['']\r\n//                 }])\r\n//             }\r\n//         })\r\n//     };\r\n//\r\n//     addAnswer = (roundId) => {\r\n//         this.setState(oldState => {\r\n//             return {\r\n//                 rounds: oldState.rounds.map((round,id) => {\r\n//                     if (id === roundId){\r\n//                         round.answer.push('');\r\n//                     }\r\n//                     return round\r\n//                 })\r\n//             }\r\n//         })\r\n//     };\r\n//\r\n//     changeTitle = () => {\r\n//         this.setState({\r\n//             title: this.titleRef.current.value\r\n//         })\r\n//     };\r\n//     changeDescription = () => {\r\n//         this.setState({\r\n//             description: this.descriptionRef.current.value\r\n//         })\r\n//     };\r\n//\r\n//     changeQuestion = (roundId, text) => {\r\n//         this.setState(oldState => {\r\n//             return {\r\n//                 rounds: oldState.rounds.map((round,rId) => {\r\n//                     if (rId === roundId) {\r\n//                         round.text = text\r\n//                     }\r\n//                     return round;\r\n//                 })\r\n//             }\r\n//         });\r\n//     };\r\n//\r\n//     changeAnswer = (roundId, answerId, text) => {\r\n//         this.setState(oldState => {\r\n//             let newRounds = oldState.rounds.slice();\r\n//\r\n//             newRounds = newRounds.map((round,rId) => {\r\n//                 if (rId === roundId) {\r\n//                     round.answer = round.answer.map((ans, ansId) => {\r\n//                         if (ansId === answerId) {\r\n//                             return text;\r\n//                         } else {\r\n//                             return ans;\r\n//                         }\r\n//                     });\r\n//                 }\r\n//                 return round;\r\n//             });\r\n//\r\n//             return {\r\n//                 rounds: newRounds.slice()\r\n//             }\r\n//         })\r\n//     };\r\n//\r\n//     create = (e) => {\r\n//         e.preventDefault();\r\n//         if (this.state.rounds.length <= 2)\r\n//             return alert('В уровне должно быть больше двух раундов');\r\n//         let newLevel = {\r\n//             id: 'none',\r\n//             name: this.state.title || 'MyLevel',\r\n//             description: this.state.description,\r\n//             rounds: this.state.rounds\r\n//         };\r\n//         this.props.addLevel(newLevel);\r\n//     };\r\n//\r\n//     render() {\r\n//         return (\r\n//             <div className=\"create-window\">\r\n//                 <button onClick={this.props.levelCreaterToggle} className='level-creater__exit-btn' ><i className=\"far fa-times-circle\"></i></button>\r\n//                 <form action=\"#\" className=\"create-form\">\r\n//                     <div className='level-create__head'>\r\n//                         <input\r\n//                             className='level-creat__title'\r\n//                             ref={this.titleRef}\r\n//                             type=\"text\"\r\n//                             value={this.state.title}\r\n//                             placeholder='Название'\r\n//                             onChange={this.changeTitle}\r\n//                         />\r\n//                         <input\r\n//                             className='level-creat__description'\r\n//                             ref={this.descriptionRef}\r\n//                             type=\"text\"\r\n//                             value={this.state.description}\r\n//                             placeholder='Описание'\r\n//                             onChange={this.changeDescription}\r\n//                         />\r\n//\r\n//                     </div>\r\n//                     {\r\n//                         this.state.rounds.map((round,id) => (\r\n//                                 <RoundCreater\r\n//                                     key={id}\r\n//                                     roundId={id}\r\n//                                     question={round.text}\r\n//                                     answer={round.answer}\r\n//                                     addAnswer={this.addAnswer}\r\n//                                     changeQuestion={this.changeQuestion}\r\n//                                     changeAnswer={this.changeAnswer}\r\n//                                 />\r\n//                         ))\r\n//                     }\r\n//                     <button className=\"create-round__add-btn create-round__add-round-btn\" onClick={this.addRound}><i className=\"far fa-plus-square\"></i></button>\r\n//                 </form>\r\n//\r\n//                 <button className=\"create-window__create-button\" onClick={this.create}>Создать</button>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n//start changes","const defaultLevels = [\r\n    {\r\n        id: 1,\r\n        name: \"Colors\",\r\n        description: \"Демо уровень с цветами\",\r\n        rounds: [\r\n            {\r\n                id: 1,\r\n                text: 'black',\r\n                answer: ['черный', 'чёрный']\r\n            },\r\n            {\r\n                id: 2,\r\n                text: 'white',\r\n                answer: ['белый']\r\n            },\r\n            {\r\n                id: 3,\r\n                text: 'green',\r\n                answer: ['зеленый']\r\n            },\r\n            {\r\n                id: 4,\r\n                text: 'pink',\r\n                answer: ['розовый']\r\n            },\r\n            {\r\n                id: 5,\r\n                text: 'yellow',\r\n                answer: ['желтый']\r\n            },\r\n            {\r\n                id: 6,\r\n                text: 'brown',\r\n                answer: ['коричневый']\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        id: 2,\r\n        name: \"Animals\",\r\n        description: \"Демо уровень с животными\",\r\n        rounds: [\r\n            {\r\n                id: 1,\r\n                text: 'Cat',\r\n                answer: ['кот', 'кошка']\r\n            },\r\n            {\r\n                id: 2,\r\n                text: 'chicken',\r\n                answer: ['курица']\r\n            },\r\n            {\r\n                id: 3,\r\n                text: 'crab',\r\n                answer: ['краб']\r\n            }\r\n        ]\r\n    }\r\n\r\n];\r\n\r\nexport default defaultLevels;","import React from 'react';\r\n\r\nimport './style.css';\r\n\r\nexport default function Header (props) {\r\n    return (\r\n        <header className=\"header-main\" >\r\n            <img className=\"eni_logo\" src={require('../../img/Eni-min.svg')} alt=\"\"/>\r\n            <h1 className={\"logoMain\"}><span>local</span>EnLearning</h1>\r\n        </header>\r\n    )\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './style.css';\r\n\r\nexport default function LevelCard (props){\r\n    const deleteSelf = () => {\r\n        props.deleteCard(props.id)\r\n    };\r\n\r\n    const startLevel = (e) => {\r\n        if(e.target.className === \"fas fa-trash-alt delete-icon\"){ // fix\r\n            return deleteSelf();\r\n        }\r\n        props.startLevel({\r\n            name: props.name,\r\n            rounds: props.rounds\r\n        });\r\n    };\r\n\r\n    return (\r\n        <li className={\"LevelCard\"} onClick={startLevel}>\r\n            <div className='LevelCard__play'>\r\n                <i className=\"fas fa-play\"></i>\r\n            </div>\r\n            <h2 className={\"LevelCard__name\"}>{props.name}</h2>\r\n            <p className={\"LevelCard__description\"}>{props.description}</p>\r\n            <i\r\n                className=\"fas fa-trash-alt delete-icon\"\r\n                onClick={deleteSelf}\r\n            />\r\n        </li>\r\n    )\r\n}\r\n\r\nLevelCard.propTypes = {\r\n    name: PropTypes.string,\r\n    description: PropTypes.string,\r\n    rounds: PropTypes.array,\r\n    startLevel: PropTypes.func,\r\n    id: PropTypes.number,\r\n    deleteCard: PropTypes.func\r\n};\r\n","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport './style.css';\r\n\r\nimport LevelCard from \"../LevelCard\";\r\n\r\nexport default function LevelsList (props) {\r\n    const getListElements = arr => (arr.map(elem => (\r\n                <LevelCard\r\n                    key={elem.id}\r\n                    id={elem.id}\r\n                    name={elem.name}\r\n                    description={elem.description}\r\n                    rounds={elem.rounds}\r\n                    startLevel={props.startLevel}\r\n                    deleteCard={props.deleteCard}\r\n                />\r\n                )));\r\n\r\n    return (\r\n        <ul className={\"LevelsList\"}>\r\n            {getListElements(props.levels)}\r\n        </ul>\r\n    )\r\n}\r\n\r\nLevelsList.propTypes = {\r\n    startLevel: PropTypes.func\r\n};","import React from 'react';\r\n\r\nimport './style.css';\r\n\r\nimport { getCookie } from \"../../funcs\";\r\n\r\nexport default function RightBar (props) {\r\n\r\n    let statistic;\r\n    if(getCookie(\"lastStatistic\")) {\r\n        statistic = JSON.parse(getCookie(\"lastStatistic\"));\r\n    }\r\n\r\n    return (\r\n        <article className=\"right-bar\" >\r\n            <h2>Statistic last test</h2>\r\n            {(!statistic)?\r\n                <div className=\"right-bar__empty\">\r\n                    <img className=\"right-bar__img\" src={require('../../img/Eni-min.svg')} alt=\"Eni\"/>\r\n                    <p className=\"right-bar__empty-text\">Empty now</p>\r\n                </div>\r\n            :\r\n                <div className=\"right-bar__statistic\">\r\n                    <p className=\"statistic__level-name\">{statistic.levelName}</p>\r\n                    <p>{`Error: ${statistic.error}`}</p>\r\n                    <p>{`Right: ${statistic.right}`}</p>\r\n                    <p>{`Speed: ${statistic.speed} s`}</p>\r\n                    <span>{`Completed: ${statistic.completed}`}</span>\r\n                </div>\r\n            }\r\n\r\n        </article>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LevelCreater from \"../../LevelCreater\";\r\n\r\nimport './style.css';\r\n\r\nimport defaultLevels from '../../../defaultLevels';\r\n\r\nimport Header from  \"../../Header\";\r\nimport LevelsList from \"../../LevelsList\";\r\nimport RightBar from \"../../RightBar\";\r\n\r\nimport {getCookie, setCookie} from \"../../../funcs\";\r\n\r\nexport default function PageMain (props) {\r\n    if (!getCookie('levels')) {\r\n        console.log('Сохраненных уровней нет. Установка уровней по умолчанию');\r\n        setCookie('levels', JSON.stringify(defaultLevels));\r\n    }\r\n\r\n    const [levels, setLevels] = useState(JSON.parse(getCookie('levels')));\r\n    const [levelCreater, setLevelCreater] = useState(false); //for toggle view of window of level create\r\n\r\n    const deleteCard = (cardId) => {\r\n        let newLevels = levels.filter(elem => elem.id !== cardId);\r\n        setCookie('levels', JSON.stringify(newLevels));\r\n        setLevels(newLevels);\r\n    };\r\n\r\n    const levelCreaterToggle = () => {\r\n        setLevelCreater(!levelCreater);\r\n    };\r\n\r\n    const addLevel = (newLevel) => {\r\n        newLevel.id = levels.length+1;\r\n        let newLevels = levels.slice();\r\n        newLevels.push(newLevel);\r\n        setCookie('levels', JSON.stringify(newLevels));\r\n        setLevels(newLevels);\r\n        setLevelCreater(false);\r\n     };\r\n\r\n    return (\r\n        <div className={\"PageMain\"}>\r\n             <Header/>\r\n             <div className=\"PageMain__content\">\r\n                 <main>\r\n                     <LevelsList\r\n                         levels={levels}\r\n                         startLevel={props.startLevel}\r\n                         deleteCard={deleteCard}\r\n                     />\r\n                     <button\r\n                         className='levels-list__add-btn hint--right'\r\n                         aria-label='Создать новый тест'\r\n                         onClick={levelCreaterToggle}\r\n                     >\r\n                         <i className=\"far fa-plus-square\"></i>\r\n                     </button>\r\n                 </main>\r\n                 <RightBar/>\r\n             </div>\r\n            {(levelCreater)?<LevelCreater levelCreaterToggle={levelCreaterToggle} addLevel={addLevel} />:''}\r\n         </div>\r\n    )\r\n}\r\n\r\nPageMain.propTypes = {\r\n    startLevel: PropTypes.func\r\n};","import React from 'react';\r\n\r\nimport './style.css';\r\n\r\nexport default function LevelHeader (props) {\r\n    //const [exp, setExp] = useState(0);\r\n    const score = props.score;\r\n\r\n    return(\r\n        <header className=\"header-level\">\r\n            <h1>{props.levelName}</h1>\r\n            <h1 className={\"header__score\"}>{`Score: ${score}`}</h1>\r\n            <div className=\"score-bar\"><div className=\"score-bar__fill\" style={{\"width\":`${score * 10}%`}}></div></div>\r\n        </header>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport \"./style.css\";\r\nimport { Transition } from \"react-transition-group\";\r\n\r\nexport default function RoundWindow (props) {\r\n    const [buttonActive, setButtonActive] = useState(false);\r\n    const [exitMode, setExitMode] = useState(\"RoundWindow\");\r\n    const [show, setShow] = useState(true);\r\n\r\n    const roundInput = React.createRef();\r\n\r\n    useEffect(()=>{\r\n        setShow(true);\r\n    }, []);\r\n\r\n    const roundClear = () => {\r\n        setButtonActive(false);\r\n        roundInput.current.value = '';\r\n    };\r\n\r\n    const checkAnswer = (e) => {\r\n        e.preventDefault();\r\n        let answer = getAnswer().value.replace(/\\s{2,}/g, ' ').trim().toLowerCase();\r\n\r\n        if (props.answer.find( (el) => (el === answer) )) {\r\n            props.changeScore(1);\r\n\r\n            setExitMode(\"right-answer\");\r\n        } else {\r\n            props.changeScore(-1);\r\n            setExitMode(\"fail-answer\");\r\n        }\r\n\r\n        setShow(false);\r\n    };\r\n\r\n    const getAnswer = () => {\r\n        return document.getElementsByClassName(\"RoundWindow__input\")[0];\r\n    };\r\n\r\n    const buttonActivate = () => {\r\n        if (getAnswer().value){\r\n            setButtonActive(true);\r\n        } else {\r\n            setButtonActive(false);\r\n        }\r\n    };\r\n\r\n    const text = props.text;\r\n    const buttonText = buttonActive? \"Проверить\": \"Пропустить\";\r\n    const buttonClassName = buttonActive?\r\n        \"RoundWindow__button RoundWindow__button_action\":\r\n        \"RoundWindow__button\";\r\n\r\n    return (\r\n        <Transition\r\n            in={show}\r\n            timeout={0}\r\n            // unmountOnExit={true}\r\n            onExited={\r\n                () => {\r\n                    roundClear();\r\n                    setTimeout(()=>{\r\n                        setExitMode(\"RoundWindow\");\r\n                        setShow(true);\r\n                        props.goNextRound(props.roundId);\r\n                    },500);\r\n                }\r\n            }\r\n        >\r\n            {(state) => {\r\n                const animationClassName = `${exitMode}-${state}`;\r\n\r\n                return (\r\n                    <div className={`RoundWindow ${animationClassName}`}>\r\n                        <p className={\"RoundWindow__text\"} >{text}</p>\r\n                        <form action=\"#\" onSubmit={checkAnswer}>\r\n                            <input\r\n                                type=\"text\"\r\n                                className={\"RoundWindow__input\"}\r\n                                onChange={buttonActivate}\r\n                                ref={roundInput}\r\n                            />\r\n                            <input\r\n                                type=\"submit\"\r\n                                value={buttonText}\r\n                                className={buttonClassName}\r\n                            />\r\n                        </form>\r\n                    </div>\r\n                )\r\n            }}\r\n        </Transition>\r\n    )\r\n}\r\n\r\n// export default class RoundWindow extends Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//\r\n//         this.state = {\r\n//             buttonActive: false,\r\n//             exitMode: \"RoundWindow\",\r\n//             show: true\r\n//         };\r\n//     }\r\n//\r\n//     componentDidMount() {\r\n//         this.setState({show:true});\r\n//     }\r\n//\r\n//     roundClear = () => {\r\n//         this.setState({\r\n//             buttonActive: false\r\n//         });\r\n//         document.getElementsByClassName(\"RoundWindow__input\")[0]\r\n//             .value = '';\r\n//     };\r\n//\r\n//     checkAnswer = (e) => {\r\n//         e.preventDefault();\r\n//         let answer = this.getAnswer().value.replace(/\\s{2,}/g, ' ').trim().toLowerCase();\r\n//\r\n//         if (this.props.answer.find( (el) => (el === answer) )) {\r\n//             this.props.changeScore(1);\r\n//             this.setState({exitMode:\"right-answer\", show:false});\r\n//\r\n//         } else {\r\n//             this.props.changeScore(-1);\r\n//             this.setState({exitMode:\"fail-answer\", show:false});\r\n//\r\n//         }\r\n//\r\n//         this.setState({show:false});\r\n//     };\r\n//\r\n//     getAnswer = () => {\r\n//         return document.getElementsByClassName(\"RoundWindow__input\")[0];\r\n//     };\r\n//\r\n//     buttonActive = () => {\r\n//         if (this.getAnswer().value){\r\n//             this.setState({\r\n//                 buttonActive: true\r\n//             })\r\n//         } else {\r\n//             this.setState({\r\n//                 buttonActive: false\r\n//             })\r\n//         }\r\n//     };\r\n//\r\n//     render() {\r\n//         console.log(this.props.answer);\r\n//\r\n//         const text = this.props.text;\r\n//         const buttonText = (this.state.buttonActive)? \"Проверить\": \"Пропустить\";\r\n//         const buttonClassName = (this.state.buttonActive)?\r\n//             \"RoundWindow__button RoundWindow__button_action\":\r\n//             \"RoundWindow__button\";\r\n//\r\n//         return (\r\n//             <Transition\r\n//                 in={this.state.show}\r\n//                 timeout={0}\r\n//                 // unmountOnExit={true}\r\n//                 onExited={\r\n//                     () => {\r\n//                         this.roundClear();\r\n//                         setTimeout(()=>{\r\n//                             this.setState({exitMode:\"RoundWindow\", show:true})\r\n//                             this.props.goNextRound(this.props.roundId);\r\n//                         },500);\r\n//                     }\r\n//                 }\r\n//             >\r\n//\r\n//                 {(state) => {\r\n//                     const animationClassName = `${this.state.exitMode}-${state}`;\r\n//\r\n//                     return (\r\n//                             <div className={`RoundWindow ${animationClassName}`}>\r\n//                                 <p className={\"RoundWindow__text\"} >{text}</p>\r\n//                                 <form action=\"#\" onSubmit={this.checkAnswer}>\r\n//                                     <input\r\n//                                         type=\"text\"\r\n//                                         className={\"RoundWindow__input\"}\r\n//                                         onChange={this.buttonActive}\r\n//                                     />\r\n//                                     <input\r\n//                                         type=\"submit\"\r\n//                                         value={buttonText}\r\n//                                         className={buttonClassName}\r\n//                                     />\r\n//                                 </form>\r\n//                             </div>\r\n//                         )\r\n//                 }}\r\n//\r\n//             </Transition>\r\n//\r\n//         )\r\n//     }\r\n// };\r\n\r\nRoundWindow.propTypes = {\r\n    text: PropTypes.string,\r\n    answer: PropTypes.array,\r\n    roundId: PropTypes.number,\r\n    goNextRound: PropTypes.func,\r\n    changeScore: PropTypes.func\r\n};","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './style.css';\r\nimport LevelHeader from \"../../LevelHeader\";\r\nimport RoundWindow from \"../../RoundWindow\";\r\n\r\nimport { usePageLevel } from '../../../hooks'\r\n\r\nexport default function PageLevel (props) {\r\n\r\n    const [\r\n        score, round,\r\n        goNextRound,\r\n        changeScore\r\n    ] = usePageLevel(props);\r\n\r\n\r\n    return (\r\n        <div className={\"PageLevel\"}>\r\n            <LevelHeader levelName={props.name} score={score}/>\r\n\r\n            <RoundWindow\r\n                text={round.text}\r\n                answer={round.answer}\r\n                roundId={round.id}\r\n                goNextRound={goNextRound}\r\n                changeScore={changeScore}\r\n            />\r\n\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\n\r\n// export default class PageLevel extends Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//\r\n//         this.state = {\r\n//             roundSelected: 1,\r\n//             roundsCompleted: [],\r\n//             score: 0,\r\n//             err: 0,\r\n//             right: 0,\r\n//             startTime: new Date()\r\n//         }\r\n//     }\r\n//\r\n//     goNextRound = (selectedNow) => {\r\n//         if (this.state.roundsCompleted.length === this.props.rounds.length-2) {\r\n//             this.setState({roundsCompleted: []});\r\n//         }\r\n//\r\n//         let nextRoundId = randomInteger(1, this.props.rounds.length);\r\n//         while(this.state.roundsCompleted.indexOf(nextRoundId) !== -1 || nextRoundId === selectedNow){\r\n//             nextRoundId = randomInteger(1, this.props.rounds.length)\r\n//         }\r\n//\r\n//         this.setState((oldState)=>{\r\n//             return {\r\n//                 roundSelected: nextRoundId,\r\n//                 roundsCompleted: oldState.roundsCompleted.concat(selectedNow)\r\n//             }\r\n//         });\r\n//         console.log(this.state.roundsCompleted);\r\n//     };\r\n//\r\n//     changeScore = (changes) => {\r\n//         (changes > 0)?\r\n//             this.setState(oldState=>({right:oldState.right+1})):\r\n//             this.setState(oldState=>({err:oldState.err+1}));\r\n//\r\n//         if (changes < 0){\r\n//             if (this.state.score === 0) {\r\n//                 return\r\n//             }\r\n//         } else if (this.state.score >= 9) {\r\n//             setTimeout(this.exitLevel, 1000);\r\n//         }\r\n//\r\n//         this.setState((state) => {\r\n//             return{score: state.score + changes}\r\n//         });\r\n//     };\r\n//\r\n//     exitLevel = () => {\r\n//         const date = new Date();\r\n//         setCookie('lastStatistic', JSON.stringify(\r\n//             {\r\n//                 levelName: this.props.name,\r\n//                 error: this.state.err,\r\n//                 right: this.state.right,\r\n//                 speed: (date - this.state.startTime) / 1000,\r\n//                 completed: `${date.getMonth()+1}.${date.getDate()} ${date.getHours()}:${date.getMinutes()}`\r\n//             }\r\n//         ));\r\n//         this.props.endLevel();\r\n//     };\r\n//\r\n//     render() {\r\n//         const score = this.state.score;\r\n//         let round = this.props.rounds.find((round) => (\r\n//             round.id === this.state.roundSelected)\r\n//         );\r\n//         const roundText = round.text;\r\n//         const roundAnswer = round.answer;\r\n//         const roundId = round.id;\r\n//\r\n//         return (\r\n//             <div className={\"PageLevel\"}>\r\n//                 <LevelHeader levelName={this.props.name} score={score}/>\r\n//\r\n//                 <RoundWindow\r\n//                     text={roundText}\r\n//                     answer={roundAnswer}\r\n//                     roundId={roundId}\r\n//                     goNextRound={this.goNextRound}\r\n//                     changeScore={this.changeScore}\r\n//                 />\r\n//\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\nPageLevel.propTypes = {\r\n    name: PropTypes.string,\r\n    rounds: PropTypes.array,\r\n    goPage: PropTypes.func\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\n\nReactDOM.render(<App/>, document.getElementById('root'));","import React, {useState} from 'react';\r\n\r\nimport './style.css';\r\nimport './../../hint.css';\r\n\r\nimport PageMain from \"../Pages/PageMain\";\r\nimport PageLevel from \"../Pages/PageLevel\";\r\n\r\nexport default function App (props) {\r\n    const goPage = (page) => {\r\n        setSelectedPage(page);\r\n    };\r\n\r\n    const endLevel = () => {\r\n        goPage(pageMain);\r\n    };\r\n\r\n    const startLevel = levelData => {\r\n        const newPage = <PageLevel // create level page\r\n            name={levelData.name}\r\n            rounds={levelData.rounds}\r\n            goPage={goPage}\r\n            endLevel={endLevel}\r\n        />;\r\n\r\n        goPage(newPage);\r\n    };\r\n\r\n    let pageMain = <PageMain startLevel={startLevel} />;\r\n\r\n    const [selectedPage, setSelectedPage] = useState(pageMain);\r\n\r\n    return selectedPage\r\n}\r\n"],"sourceRoot":""}