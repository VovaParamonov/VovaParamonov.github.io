{"version":3,"sources":["img/Eni-min.svg","Components/LevelCreater/RoundCreater/index.jsx","Components/LevelCreater/index.jsx","defaultLevels.js","Components/Header/index.jsx","Components/LevelCard/index.jsx","Components/LevelsList/index.jsx","funcs.js","Components/RightBar/index.js","Components/Pages/PageMain/index.jsx","Components/LevelHeader/index.jsx","Components/RoundWindow/index.jsx","Components/Pages/PageLevel/index.jsx","index.js","Components/App/index.jsx"],"names":["module","exports","__webpack_require__","p","RoundCreater","props","questionHref","React","createRef","answerHrefs","react_default","a","createElement","className","type","placeholder","value","question","onChange","changeQuestion","roundId","current","ref","answer","map","id","push","key","concat","answerId","text","toLowerCase","changeAnswer","onClick","e","preventDefault","addAnswer","LevelCreater","_useState","useState","_useState2","Object","slicedToArray","title","setTitle","_useState3","_useState4","description","setDescription","_useState5","_useState6","rounds","setRounds","titleRef","descriptionRef","round","rId","newRounds","slice","ans","ansId","levelCreaterToggle","action","length","alert","newLevel","name","addLevel","defaultLevels","Header","src","require","alt","LevelCard","deleteSelf","deleteCard","target","startLevel","LevelsList","levels","elem","randomInteger","min","max","rand","Math","random","getCookie","matches","document","cookie","match","RegExp","decodeURIComponent","undefined","setCookie","date","Date","setDate","getDate","toUTCString","RightBar","statistic","JSON","parse","levelName","error","right","speed","completed","PageMain","console","log","stringify","setLevels","levelCreater","setLevelCreater","cardId","newLevels","filter","aria-label","LevelHeader","score","style","width","RoundWindow","buttonActive","setButtonActive","exitMode","setExitMode","show","setShow","roundInput","useEffect","checkAnswer","getAnswer","replace","trim","find","el","changeScore","getElementsByClassName","buttonActivate","buttonText","buttonClassName","Transition","in","timeout","onExited","setTimeout","goNextRound","state","animationClassName","onSubmit","PageLevel","roundSelected","setRoundSelected","roundsCompleted","setRoundsCompleted","setScore","_useState7","_useState8","err","setErr","_useState9","_useState10","setRight","_useState11","_useState12","startTime","exitLevel","getMonth","getHours","getMinutes","endLevel","roundText","roundAnswer","selectedNow","nextRoundId","indexOf","changes","ReactDOM","render","goPage","page","setSelectedPage","pageMain","levelData","newPage","selectedPage","getElementById"],"mappings":"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","file":"static/js/main.f72513de.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Eni-min.95eae398.svg\";","import React from 'react';\r\n\r\nimport './style.css';\r\n\r\nexport default function RoundCreater(props) {\r\n    let questionHref = React.createRef();\r\n    let answerHrefs = [];\r\n\r\n    function addAnswer(e) {\r\n        e.preventDefault();\r\n        props.addAnswer(props.roundId);\r\n    }\r\n\r\n    function changeQuestion() {\r\n        props.changeQuestion(props.roundId, questionHref.current.value);\r\n    }\r\n    function changeAnswer(answerId) {\r\n        const text = answerHrefs[answerId].current.value.toLowerCase();\r\n        props.changeAnswer(props.roundId, answerId, text);\r\n    }\r\n\r\n    return(\r\n        <div className=\"create-round-wrapper\">\r\n            <input\r\n                className='create-round__input'\r\n                type=\"text\"\r\n                placeholder=\"Вопрос\"\r\n                value={props.question}\r\n                onChange={changeQuestion}\r\n                ref={questionHref}\r\n            />\r\n            {\r\n                props.answer.map((answer,id) => {\r\n                    answerHrefs.push(React.createRef());\r\n                    return(\r\n                            <input\r\n                                className='create-round__input'\r\n                                key={`${props.roundId}-${id}`}\r\n                                type=\"text\"\r\n                                placeholder={`Ответ №${id+1}`}\r\n                                value={answer}\r\n                                onChange={()=>changeAnswer(id)}\r\n                                ref={answerHrefs[id]}\r\n                            />\r\n                        )\r\n                })\r\n            }\r\n            <button className=\"create-round__add-btn\" onClick={addAnswer}><i className=\"far fa-plus-square\"></i></button>\r\n        </div>\r\n    );\r\n}","import React, { useState } from 'react';\r\n\r\nimport RoundCreater from \"./RoundCreater\";\r\n\r\nimport './style.css';\r\n\r\nexport default function LevelCreater (props) {\r\n    const [title, setTitle] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [rounds, setRounds] = useState([{\r\n        id: 1,\r\n        text: '',\r\n        answer: ['']\r\n    }]);\r\n\r\n    const titleRef = React.createRef();\r\n    const descriptionRef = React.createRef();\r\n\r\n    const addRound = (e) => {\r\n        e.preventDefault();\r\n        setRounds(rounds.concat([{\r\n            id: rounds.length+1,\r\n            text: '',\r\n            answer: ['']\r\n        }]));\r\n    };\r\n\r\n    const addAnswer = (roundId) => {\r\n        setRounds(rounds.map((round,id) => {\r\n            if (id === roundId){\r\n                round.answer.push('');\r\n            }\r\n            return round\r\n        }));\r\n    };\r\n\r\n    const changeTitle = () => {\r\n        setTitle(titleRef.current.value);\r\n    };\r\n\r\n    const changeDescription = () => {\r\n        setDescription(descriptionRef.current.value);\r\n    };\r\n\r\n    const changeQuestion = (roundId, text) => {\r\n        setRounds(rounds.map((round,rId) => {\r\n            if (rId === roundId) {\r\n                round.text = text\r\n            }\r\n            return round;\r\n        }));\r\n    };\r\n\r\n    const changeAnswer = (roundId, answerId, text) => {\r\n        let newRounds = rounds.slice();\r\n\r\n        newRounds = newRounds.map((round,rId) => {\r\n            if (rId === roundId) {\r\n                round.answer = round.answer.map((ans, ansId) => {\r\n                    if (ansId === answerId) {\r\n                        return text;\r\n                    } else {\r\n                        return ans;\r\n                    }\r\n                });\r\n            }\r\n            return round;\r\n        });\r\n\r\n        setRounds(newRounds.slice());\r\n    };\r\n\r\n    const create = (e) => {\r\n        e.preventDefault();\r\n        if (rounds.length <= 2)\r\n            return alert('В уровне должно быть больше двух раундов');\r\n        let newLevel = {\r\n            id: 'none',\r\n            name: title || 'MyLevel',\r\n            description: description,\r\n            rounds: rounds\r\n        };\r\n        props.addLevel(newLevel);\r\n    };\r\n\r\n    return (\r\n        <div className=\"create-window\">\r\n            <button onClick={props.levelCreaterToggle} className='level-creater__exit-btn' ><i className=\"far fa-times-circle\"></i></button>\r\n            <form action=\"#\" className=\"create-form\">\r\n                <div className='level-create__head'>\r\n                    <input\r\n                        className='level-creat__title'\r\n                        ref={titleRef}\r\n                        type=\"text\"\r\n                        value={title}\r\n                        placeholder='Название'\r\n                        onChange={changeTitle}\r\n                    />\r\n                    <input\r\n                        className='level-creat__description'\r\n                        ref={descriptionRef}\r\n                        type=\"text\"\r\n                        value={description}\r\n                        placeholder='Описание'\r\n                        onChange={changeDescription}\r\n                    />\r\n\r\n                </div>\r\n                {\r\n                    rounds.map((round,id) => (\r\n                            <RoundCreater\r\n                                key={id}\r\n                                roundId={id}\r\n                                question={round.text}\r\n                                answer={round.answer}\r\n                                addAnswer={addAnswer}\r\n                                changeQuestion={changeQuestion}\r\n                                changeAnswer={changeAnswer}\r\n                            />\r\n                    ))\r\n                }\r\n                <button className=\"create-round__add-btn create-round__add-round-btn\" onClick={addRound}><i className=\"far fa-plus-square\"></i></button>\r\n            </form>\r\n            <button className=\"create-window__create-button\" onClick={create}>Создать</button>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\n// export default class LevelCreater extends Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//\r\n//         this.state = {\r\n//             title:'',\r\n//             description:'',\r\n//             rounds: [\r\n//                 {\r\n//                     id: 1,\r\n//                     text: '',\r\n//                     answer: ['']\r\n//                 }\r\n//             ]\r\n//         };\r\n//\r\n//         this.titleRef = React.createRef();\r\n//         this.descriptionRef = React.createRef();\r\n//     }\r\n//\r\n//     addRound = (e) => {\r\n//         e.preventDefault();\r\n//         this.setState(oldState => {\r\n//             return {\r\n//                 rounds: oldState.rounds.concat([{\r\n//                     id: oldState.rounds.length+1,\r\n//                     text: '',\r\n//                     answer: ['']\r\n//                 }])\r\n//             }\r\n//         })\r\n//     };\r\n//\r\n//     addAnswer = (roundId) => {\r\n//         this.setState(oldState => {\r\n//             return {\r\n//                 rounds: oldState.rounds.map((round,id) => {\r\n//                     if (id === roundId){\r\n//                         round.answer.push('');\r\n//                     }\r\n//                     return round\r\n//                 })\r\n//             }\r\n//         })\r\n//     };\r\n//\r\n//     changeTitle = () => {\r\n//         this.setState({\r\n//             title: this.titleRef.current.value\r\n//         })\r\n//     };\r\n//     changeDescription = () => {\r\n//         this.setState({\r\n//             description: this.descriptionRef.current.value\r\n//         })\r\n//     };\r\n//\r\n//     changeQuestion = (roundId, text) => {\r\n//         this.setState(oldState => {\r\n//             return {\r\n//                 rounds: oldState.rounds.map((round,rId) => {\r\n//                     if (rId === roundId) {\r\n//                         round.text = text\r\n//                     }\r\n//                     return round;\r\n//                 })\r\n//             }\r\n//         });\r\n//     };\r\n//\r\n//     changeAnswer = (roundId, answerId, text) => {\r\n//         this.setState(oldState => {\r\n//             let newRounds = oldState.rounds.slice();\r\n//\r\n//             newRounds = newRounds.map((round,rId) => {\r\n//                 if (rId === roundId) {\r\n//                     round.answer = round.answer.map((ans, ansId) => {\r\n//                         if (ansId === answerId) {\r\n//                             return text;\r\n//                         } else {\r\n//                             return ans;\r\n//                         }\r\n//                     });\r\n//                 }\r\n//                 return round;\r\n//             });\r\n//\r\n//             return {\r\n//                 rounds: newRounds.slice()\r\n//             }\r\n//         })\r\n//     };\r\n//\r\n//     create = (e) => {\r\n//         e.preventDefault();\r\n//         if (this.state.rounds.length <= 2)\r\n//             return alert('В уровне должно быть больше двух раундов');\r\n//         let newLevel = {\r\n//             id: 'none',\r\n//             name: this.state.title || 'MyLevel',\r\n//             description: this.state.description,\r\n//             rounds: this.state.rounds\r\n//         };\r\n//         this.props.addLevel(newLevel);\r\n//     };\r\n//\r\n//     render() {\r\n//         return (\r\n//             <div className=\"create-window\">\r\n//                 <button onClick={this.props.levelCreaterToggle} className='level-creater__exit-btn' ><i className=\"far fa-times-circle\"></i></button>\r\n//                 <form action=\"#\" className=\"create-form\">\r\n//                     <div className='level-create__head'>\r\n//                         <input\r\n//                             className='level-creat__title'\r\n//                             ref={this.titleRef}\r\n//                             type=\"text\"\r\n//                             value={this.state.title}\r\n//                             placeholder='Название'\r\n//                             onChange={this.changeTitle}\r\n//                         />\r\n//                         <input\r\n//                             className='level-creat__description'\r\n//                             ref={this.descriptionRef}\r\n//                             type=\"text\"\r\n//                             value={this.state.description}\r\n//                             placeholder='Описание'\r\n//                             onChange={this.changeDescription}\r\n//                         />\r\n//\r\n//                     </div>\r\n//                     {\r\n//                         this.state.rounds.map((round,id) => (\r\n//                                 <RoundCreater\r\n//                                     key={id}\r\n//                                     roundId={id}\r\n//                                     question={round.text}\r\n//                                     answer={round.answer}\r\n//                                     addAnswer={this.addAnswer}\r\n//                                     changeQuestion={this.changeQuestion}\r\n//                                     changeAnswer={this.changeAnswer}\r\n//                                 />\r\n//                         ))\r\n//                     }\r\n//                     <button className=\"create-round__add-btn create-round__add-round-btn\" onClick={this.addRound}><i className=\"far fa-plus-square\"></i></button>\r\n//                 </form>\r\n//\r\n//                 <button className=\"create-window__create-button\" onClick={this.create}>Создать</button>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n//start changes","const defaultLevels = [\r\n    {\r\n        id: 1,\r\n        name: \"Colors\",\r\n        description: \"Демо уровень с цветами\",\r\n        rounds: [\r\n            {\r\n                id: 1,\r\n                text: 'black',\r\n                answer: ['черный', 'чёрный']\r\n            },\r\n            {\r\n                id: 2,\r\n                text: 'white',\r\n                answer: ['белый']\r\n            },\r\n            {\r\n                id: 3,\r\n                text: 'green',\r\n                answer: ['зеленый']\r\n            },\r\n            {\r\n                id: 4,\r\n                text: 'pink',\r\n                answer: ['розовый']\r\n            },\r\n            {\r\n                id: 5,\r\n                text: 'yellow',\r\n                answer: ['желтый']\r\n            },\r\n            {\r\n                id: 6,\r\n                text: 'brown',\r\n                answer: ['коричневый']\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        id: 2,\r\n        name: \"Animals\",\r\n        description: \"Демо уровень с животными\",\r\n        rounds: [\r\n            {\r\n                id: 1,\r\n                text: 'Cat',\r\n                answer: ['кот', 'кошка']\r\n            },\r\n            {\r\n                id: 2,\r\n                text: 'chicken',\r\n                answer: ['курица']\r\n            },\r\n            {\r\n                id: 3,\r\n                text: 'crab',\r\n                answer: ['краб']\r\n            }\r\n        ]\r\n    }\r\n\r\n];\r\n\r\nexport default defaultLevels;","import React from 'react';\r\n\r\nimport './style.css';\r\n\r\nexport default function Header (props) {\r\n    return (\r\n        <header className=\"header-main\" >\r\n            <img className=\"eni_logo\" src={require('../../img/Eni-min.svg')} alt=\"\"/>\r\n            <h1 className={\"logoMain\"}><span>local</span>EnLearning</h1>\r\n        </header>\r\n    )\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './style.css';\r\n\r\nexport default function LevelCard (props){\r\n    const deleteSelf = () => {\r\n        props.deleteCard(props.id)\r\n    };\r\n\r\n    const startLevel = (e) => {\r\n        if(e.target.className === \"fas fa-trash-alt delete-icon\"){ // fix\r\n            return deleteSelf();\r\n        }\r\n        props.startLevel({\r\n            name: props.name,\r\n            rounds: props.rounds\r\n        });\r\n    };\r\n\r\n    return (\r\n        <li className={\"LevelCard\"} onClick={startLevel}>\r\n            <div className='LevelCard__play'>\r\n                <i className=\"fas fa-play\"></i>\r\n            </div>\r\n            <h2 className={\"LevelCard__name\"}>{props.name}</h2>\r\n            <p className={\"LevelCard__description\"}>{props.description}</p>\r\n            <i\r\n                className=\"fas fa-trash-alt delete-icon\"\r\n                onClick={deleteSelf}\r\n            />\r\n        </li>\r\n    )\r\n}\r\n\r\nLevelCard.propTypes = {\r\n    name: PropTypes.string,\r\n    description: PropTypes.string,\r\n    rounds: PropTypes.array,\r\n    startLevel: PropTypes.func,\r\n    id: PropTypes.number,\r\n    deleteCard: PropTypes.func\r\n};\r\n","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport './style.css';\r\n\r\nimport LevelCard from \"../LevelCard\";\r\n\r\nexport default function LevelsList (props) {\r\n    const getListElements = arr => (arr.map(elem => (\r\n                <LevelCard\r\n                    key={elem.id}\r\n                    id={elem.id}\r\n                    name={elem.name}\r\n                    description={elem.description}\r\n                    rounds={elem.rounds}\r\n                    startLevel={props.startLevel}\r\n                    deleteCard={props.deleteCard}\r\n                />\r\n                )));\r\n\r\n    return (\r\n        <ul className={\"LevelsList\"}>\r\n            {getListElements(props.levels)}\r\n        </ul>\r\n    )\r\n}\r\n\r\nLevelsList.propTypes = {\r\n    startLevel: PropTypes.func\r\n};","function randomInteger(min, max) {\r\n    let rand = min - 0.5 + Math.random() * (max - min + 1);\r\n    rand = Math.round(rand);\r\n    return rand;\r\n}\r\n\r\n//-----cookies\r\n// возвращает cookie с именем name, если есть, если нет, то undefined\r\nfunction getCookie(name) {\r\n    let matches = document.cookie.match(new RegExp(\r\n        //\"(?:^|; )\" + name.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, '\\\\$1') + \"=([^;]*)\"\r\n        \"(?:^|; )\" + name + \"=([^;]*)\"\r\n    ));\r\n    return matches ? decodeURIComponent(matches[1]) : undefined;\r\n}\r\n\r\nfunction setCookie(cookie, value) {\r\n    let date = new Date();\r\n    date.setDate(date.getDate() + 365);\r\n    date = date.toUTCString();\r\n    document.cookie = `${cookie}=${value};path=/;expires=${date}`;\r\n}\r\n\r\nfunction deleteCookie(cookie) {\r\n    let date = new Date(0).toUTCString();\r\n    document.cookie = `${cookie}=;path=/;expires=${date}`\r\n}\r\n\r\nexport { randomInteger, getCookie, setCookie, deleteCookie }","import React from 'react';\r\n\r\nimport './style.css';\r\n\r\nimport { getCookie } from \"../../funcs\";\r\n\r\nexport default function RightBar (props) {\r\n\r\n    let statistic;\r\n    if(getCookie(\"lastStatistic\")) {\r\n        statistic = JSON.parse(getCookie(\"lastStatistic\"));\r\n    }\r\n\r\n    return (\r\n        <article className=\"right-bar\" >\r\n            <h2>Statistic last test</h2>\r\n            {(!statistic)?\r\n                <div className=\"right-bar__empty\">\r\n                    <img className=\"right-bar__img\" src={require('../../img/Eni-min.svg')} alt=\"Eni\"/>\r\n                    <p className=\"right-bar__empty-text\">Empty now</p>\r\n                </div>\r\n            :\r\n                <div className=\"right-bar__statistic\">\r\n                    <p className=\"statistic__level-name\">{statistic.levelName}</p>\r\n                    <p>{`Error: ${statistic.error}`}</p>\r\n                    <p>{`Right: ${statistic.right}`}</p>\r\n                    <p>{`Speed: ${statistic.speed} s`}</p>\r\n                    <span>{`Completed: ${statistic.completed}`}</span>\r\n                </div>\r\n            }\r\n\r\n        </article>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LevelCreater from \"../../LevelCreater\";\r\n\r\nimport './style.css';\r\n\r\nimport defaultLevels from '../../../defaultLevels';\r\n\r\nimport Header from  \"../../Header\";\r\nimport LevelsList from \"../../LevelsList\";\r\nimport RightBar from \"../../RightBar\";\r\n\r\nimport {getCookie, setCookie} from \"../../../funcs\";\r\n\r\n\r\nexport default function PageMain (props) {\r\n    if (!getCookie('levels')) {\r\n        console.log('Сохраненных уровней нет. Установка уровней по умолчанию');\r\n        setCookie('levels', JSON.stringify(defaultLevels));\r\n    }\r\n\r\n    const [levels, setLevels] = useState(JSON.parse(getCookie('levels')));\r\n    const [levelCreater, setLevelCreater] = useState(false);\r\n\r\n    const deleteCard = (cardId) => {\r\n        let newLevels = levels.filter(elem => elem.id !== cardId);\r\n        setCookie('levels', JSON.stringify(newLevels));\r\n        setLevels(newLevels);\r\n    };\r\n\r\n    const levelCreaterToggle = () => {\r\n        setLevelCreater(!levelCreater);\r\n    };\r\n\r\n    const addLevel = (newLevel) => {\r\n        newLevel.id = levels.length+1;\r\n        let newLevels = levels.slice();\r\n        newLevels.push(newLevel);\r\n        setCookie('levels', JSON.stringify(newLevels));\r\n        setLevels(newLevels);\r\n        setLevelCreater(false);\r\n     };\r\n\r\n    return (\r\n        <div className={\"PageMain\"}>\r\n             <Header/>\r\n             <div className=\"PageMain__content\">\r\n                 <main>\r\n                     <LevelsList\r\n                         levels={levels}\r\n                         startLevel={props.startLevel}\r\n                         deleteCard={deleteCard}\r\n                     />\r\n                     <button\r\n                         className='levels-list__add-btn hint--right'\r\n                         aria-label='Создать новый тест'\r\n                         onClick={levelCreaterToggle}\r\n                     >\r\n                         <i className=\"far fa-plus-square\"></i>\r\n                     </button>\r\n                 </main>\r\n                 <RightBar/>\r\n             </div>\r\n            {(levelCreater)?<LevelCreater levelCreaterToggle={levelCreaterToggle} addLevel={addLevel} />:''}\r\n         </div>\r\n    )\r\n}\r\n\r\n\r\n// export default class PageMain extends Component{\r\n//     constructor(props){\r\n//         super(props);\r\n//\r\n//         if (!getCookie('levels')) {\r\n//             console.log('Сохраненных уровней нет. Установка уровней по умолчанию');\r\n//             setCookie('levels', JSON.stringify(defaultLevels));\r\n//         }\r\n//\r\n//         this.state = {\r\n//             levels: JSON.parse(getCookie('levels')),\r\n//             levelCreater: false\r\n//         };\r\n//\r\n//     }\r\n//\r\n//     deleteCard = (cardId) => {\r\n//         this.setState(oldState => {\r\n//             oldState.levels = oldState.levels.filter(elem => elem.id !== cardId);\r\n//             setCookie('levels', JSON.stringify(oldState.levels));\r\n//             return {\r\n//                 levels: oldState.levels\r\n//             }\r\n//         })\r\n//     };\r\n//\r\n//     levelCreaterToggle = () => {\r\n//         this.setState(oldState => ({levelCreater: (!oldState.levelCreater)}));\r\n//     };\r\n//\r\n//     addLevel = (newLevel) => {\r\n//             this.setState(oldState=>{\r\n//                 newLevel.id = oldState.levels.length+1;\r\n//                 oldState.levels.push(newLevel);\r\n//                 setCookie('levels', JSON.stringify(oldState.levels));\r\n//                 return({levels: oldState.levels, levelCreater: false});\r\n//             });\r\n//     };\r\n//\r\n//     render() {\r\n//         return (\r\n//             <div className={\"PageMain\"}>\r\n//                 <Header/>\r\n//                 <main>\r\n//                     <LevelsList\r\n//                         levels={this.state.levels}\r\n//                         startLevel={this.props.startLevel}\r\n//                         deleteCard={this.deleteCard}\r\n//                     />\r\n//                     <button\r\n//                         className='levels-list__add-btn hint--right'\r\n//                         aria-label='Создать новый тест'\r\n//                         onClick={this.levelCreaterToggle}\r\n//                     >\r\n//                         <i className=\"far fa-plus-square\"></i>\r\n//                     </button>\r\n//                 </main>\r\n//                 {(this.state.levelCreater)?<LevelCreater levelCreaterToggle={this.levelCreaterToggle} addLevel={this.addLevel} />:''}\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\nPageMain.propTypes = {\r\n    startLevel: PropTypes.func\r\n};","import React from 'react';\r\n\r\nimport './style.css';\r\n\r\nexport default function LevelHeader (props) {\r\n    //const [exp, setExp] = useState(0);\r\n    const score = props.score;\r\n\r\n    return(\r\n        <header className=\"header-level\">\r\n            <h1>{props.levelName}</h1>\r\n            <h1 className={\"header__score\"}>{`Score: ${score}`}</h1>\r\n            <div className=\"score-bar\"><div className=\"score-bar__fill\" style={{\"width\":`${score * 10}%`}}></div></div>\r\n        </header>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport \"./style.css\";\r\nimport { Transition } from \"react-transition-group\";\r\n\r\nexport default function RoundWindow (props) {\r\n    const [buttonActive, setButtonActive] = useState(false);\r\n    const [exitMode, setExitMode] = useState(\"RoundWindow\");\r\n    const [show, setShow] = useState(true);\r\n\r\n    const roundInput = React.createRef();\r\n\r\n    useEffect(()=>{\r\n        setShow(true);\r\n    }, []);\r\n\r\n    const roundClear = () => {\r\n        setButtonActive(false);\r\n        roundInput.current.value = '';\r\n    };\r\n\r\n    const checkAnswer = (e) => {\r\n        e.preventDefault();\r\n        let answer = getAnswer().value.replace(/\\s{2,}/g, ' ').trim().toLowerCase();\r\n\r\n        if (props.answer.find( (el) => (el === answer) )) {\r\n            props.changeScore(1);\r\n\r\n            setExitMode(\"right-answer\");\r\n        } else {\r\n            props.changeScore(-1);\r\n            setExitMode(\"fail-answer\");\r\n        }\r\n\r\n        setShow(false);\r\n    };\r\n\r\n    const getAnswer = () => {\r\n        return document.getElementsByClassName(\"RoundWindow__input\")[0];\r\n    };\r\n\r\n    const buttonActivate = () => {\r\n        if (getAnswer().value){\r\n            setButtonActive(true);\r\n        } else {\r\n            setButtonActive(false);\r\n        }\r\n    };\r\n\r\n    console.log(props.answer);\r\n\r\n    const text = props.text;\r\n    const buttonText = buttonActive? \"Проверить\": \"Пропустить\";\r\n    const buttonClassName = buttonActive?\r\n        \"RoundWindow__button RoundWindow__button_action\":\r\n        \"RoundWindow__button\";\r\n\r\n    return (\r\n        <Transition\r\n            in={show}\r\n            timeout={0}\r\n            // unmountOnExit={true}\r\n            onExited={\r\n                () => {\r\n                    roundClear();\r\n                    setTimeout(()=>{\r\n                        setExitMode(\"RoundWindow\");\r\n                        setShow(true);\r\n                        props.goNextRound(props.roundId);\r\n                    },500);\r\n                }\r\n            }\r\n        >\r\n            {(state) => {\r\n                const animationClassName = `${exitMode}-${state}`;\r\n\r\n                return (\r\n                    <div className={`RoundWindow ${animationClassName}`}>\r\n                        <p className={\"RoundWindow__text\"} >{text}</p>\r\n                        <form action=\"#\" onSubmit={checkAnswer}>\r\n                            <input\r\n                                type=\"text\"\r\n                                className={\"RoundWindow__input\"}\r\n                                onChange={buttonActivate}\r\n                                ref={roundInput}\r\n                            />\r\n                            <input\r\n                                type=\"submit\"\r\n                                value={buttonText}\r\n                                className={buttonClassName}\r\n                            />\r\n                        </form>\r\n                    </div>\r\n                )\r\n            }}\r\n        </Transition>\r\n    )\r\n}\r\n\r\n// export default class RoundWindow extends Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//\r\n//         this.state = {\r\n//             buttonActive: false,\r\n//             exitMode: \"RoundWindow\",\r\n//             show: true\r\n//         };\r\n//     }\r\n//\r\n//     componentDidMount() {\r\n//         this.setState({show:true});\r\n//     }\r\n//\r\n//     roundClear = () => {\r\n//         this.setState({\r\n//             buttonActive: false\r\n//         });\r\n//         document.getElementsByClassName(\"RoundWindow__input\")[0]\r\n//             .value = '';\r\n//     };\r\n//\r\n//     checkAnswer = (e) => {\r\n//         e.preventDefault();\r\n//         let answer = this.getAnswer().value.replace(/\\s{2,}/g, ' ').trim().toLowerCase();\r\n//\r\n//         if (this.props.answer.find( (el) => (el === answer) )) {\r\n//             this.props.changeScore(1);\r\n//             this.setState({exitMode:\"right-answer\", show:false});\r\n//\r\n//         } else {\r\n//             this.props.changeScore(-1);\r\n//             this.setState({exitMode:\"fail-answer\", show:false});\r\n//\r\n//         }\r\n//\r\n//         this.setState({show:false});\r\n//     };\r\n//\r\n//     getAnswer = () => {\r\n//         return document.getElementsByClassName(\"RoundWindow__input\")[0];\r\n//     };\r\n//\r\n//     buttonActive = () => {\r\n//         if (this.getAnswer().value){\r\n//             this.setState({\r\n//                 buttonActive: true\r\n//             })\r\n//         } else {\r\n//             this.setState({\r\n//                 buttonActive: false\r\n//             })\r\n//         }\r\n//     };\r\n//\r\n//     render() {\r\n//         console.log(this.props.answer);\r\n//\r\n//         const text = this.props.text;\r\n//         const buttonText = (this.state.buttonActive)? \"Проверить\": \"Пропустить\";\r\n//         const buttonClassName = (this.state.buttonActive)?\r\n//             \"RoundWindow__button RoundWindow__button_action\":\r\n//             \"RoundWindow__button\";\r\n//\r\n//         return (\r\n//             <Transition\r\n//                 in={this.state.show}\r\n//                 timeout={0}\r\n//                 // unmountOnExit={true}\r\n//                 onExited={\r\n//                     () => {\r\n//                         this.roundClear();\r\n//                         setTimeout(()=>{\r\n//                             this.setState({exitMode:\"RoundWindow\", show:true})\r\n//                             this.props.goNextRound(this.props.roundId);\r\n//                         },500);\r\n//                     }\r\n//                 }\r\n//             >\r\n//\r\n//                 {(state) => {\r\n//                     const animationClassName = `${this.state.exitMode}-${state}`;\r\n//\r\n//                     return (\r\n//                             <div className={`RoundWindow ${animationClassName}`}>\r\n//                                 <p className={\"RoundWindow__text\"} >{text}</p>\r\n//                                 <form action=\"#\" onSubmit={this.checkAnswer}>\r\n//                                     <input\r\n//                                         type=\"text\"\r\n//                                         className={\"RoundWindow__input\"}\r\n//                                         onChange={this.buttonActive}\r\n//                                     />\r\n//                                     <input\r\n//                                         type=\"submit\"\r\n//                                         value={buttonText}\r\n//                                         className={buttonClassName}\r\n//                                     />\r\n//                                 </form>\r\n//                             </div>\r\n//                         )\r\n//                 }}\r\n//\r\n//             </Transition>\r\n//\r\n//         )\r\n//     }\r\n// };\r\n\r\nRoundWindow.propTypes = {\r\n    text: PropTypes.string,\r\n    answer: PropTypes.array,\r\n    roundId: PropTypes.number,\r\n    goNextRound: PropTypes.func,\r\n    changeScore: PropTypes.func\r\n};","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './style.css';\r\nimport LevelHeader from \"../../LevelHeader\";\r\nimport RoundWindow from \"../../RoundWindow\";\r\nimport { randomInteger, setCookie }  from \"../../../funcs\";\r\n\r\nexport default function PageLevel (props) {\r\n    const [roundSelected, setRoundSelected] = useState(1);\r\n    const [roundsCompleted, setRoundsCompleted] = useState([]);\r\n    const [score, setScore] = useState(0);\r\n    const [err, setErr] = useState(0);\r\n    const [right, setRight] = useState(0);\r\n    const [startTime, setStartTime] = useState(0);\r\n\r\n    const goNextRound =(selectedNow) => {\r\n        let nextRoundId = randomInteger(1, props.rounds.length);\r\n        while(roundsCompleted.indexOf(nextRoundId) !== -1 || nextRoundId === selectedNow){\r\n             nextRoundId = randomInteger(1, props.rounds.length)\r\n        }\r\n\r\n        setRoundSelected(nextRoundId);\r\n\r\n        if (roundsCompleted.length === props.rounds.length-2){\r\n            setRoundsCompleted([selectedNow]);\r\n        } else {\r\n            setRoundsCompleted(roundsCompleted.concat(selectedNow));\r\n        }\r\n    };\r\n\r\n    const changeScore = (changes) => {\r\n        (changes > 0)?\r\n            setRight(right+1):\r\n            setErr(err+1);\r\n\r\n        if (changes < 0){\r\n            if (score === 0) {\r\n                return\r\n            }\r\n        } else if (score >= 9) {\r\n            setTimeout(exitLevel, 1000);\r\n        }\r\n\r\n        setScore(score+changes);\r\n    };\r\n\r\n    const exitLevel = () => {\r\n        const date = new Date();\r\n        setCookie('lastStatistic', JSON.stringify(\r\n            {\r\n                levelName: props.name,\r\n                error: err,\r\n                right: right,\r\n                speed: (date - startTime) / 1000,\r\n                completed: `${date.getMonth()+1}.${date.getDate()} ${date.getHours()}:${date.getMinutes()}`\r\n            }\r\n        ));\r\n        props.endLevel();\r\n    };\r\n\r\n        let round = props.rounds.find((round) => (\r\n            round.id === roundSelected)\r\n        );\r\n        const roundText = round.text;\r\n        const roundAnswer = round.answer;\r\n        const roundId = round.id;\r\n\r\n        return (\r\n            <div className={\"PageLevel\"}>\r\n                <LevelHeader levelName={props.name} score={score}/>\r\n\r\n                <RoundWindow\r\n                    text={roundText}\r\n                    answer={roundAnswer}\r\n                    roundId={roundId}\r\n                    goNextRound={goNextRound}\r\n                    changeScore={changeScore}\r\n                />\r\n\r\n            </div>\r\n        )\r\n\r\n\r\n}\r\n\r\n\r\n// export default class PageLevel extends Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//\r\n//         this.state = {\r\n//             roundSelected: 1,\r\n//             roundsCompleted: [],\r\n//             score: 0,\r\n//             err: 0,\r\n//             right: 0,\r\n//             startTime: new Date()\r\n//         }\r\n//     }\r\n//\r\n//     goNextRound = (selectedNow) => {\r\n//         if (this.state.roundsCompleted.length === this.props.rounds.length-2) {\r\n//             this.setState({roundsCompleted: []});\r\n//         }\r\n//\r\n//         let nextRoundId = randomInteger(1, this.props.rounds.length);\r\n//         while(this.state.roundsCompleted.indexOf(nextRoundId) !== -1 || nextRoundId === selectedNow){\r\n//             nextRoundId = randomInteger(1, this.props.rounds.length)\r\n//         }\r\n//\r\n//         this.setState((oldState)=>{\r\n//             return {\r\n//                 roundSelected: nextRoundId,\r\n//                 roundsCompleted: oldState.roundsCompleted.concat(selectedNow)\r\n//             }\r\n//         });\r\n//         console.log(this.state.roundsCompleted);\r\n//     };\r\n//\r\n//     changeScore = (changes) => {\r\n//         (changes > 0)?\r\n//             this.setState(oldState=>({right:oldState.right+1})):\r\n//             this.setState(oldState=>({err:oldState.err+1}));\r\n//\r\n//         if (changes < 0){\r\n//             if (this.state.score === 0) {\r\n//                 return\r\n//             }\r\n//         } else if (this.state.score >= 9) {\r\n//             setTimeout(this.exitLevel, 1000);\r\n//         }\r\n//\r\n//         this.setState((state) => {\r\n//             return{score: state.score + changes}\r\n//         });\r\n//     };\r\n//\r\n//     exitLevel = () => {\r\n//         const date = new Date();\r\n//         setCookie('lastStatistic', JSON.stringify(\r\n//             {\r\n//                 levelName: this.props.name,\r\n//                 error: this.state.err,\r\n//                 right: this.state.right,\r\n//                 speed: (date - this.state.startTime) / 1000,\r\n//                 completed: `${date.getMonth()+1}.${date.getDate()} ${date.getHours()}:${date.getMinutes()}`\r\n//             }\r\n//         ));\r\n//         this.props.endLevel();\r\n//     };\r\n//\r\n//     render() {\r\n//         const score = this.state.score;\r\n//         let round = this.props.rounds.find((round) => (\r\n//             round.id === this.state.roundSelected)\r\n//         );\r\n//         const roundText = round.text;\r\n//         const roundAnswer = round.answer;\r\n//         const roundId = round.id;\r\n//\r\n//         return (\r\n//             <div className={\"PageLevel\"}>\r\n//                 <LevelHeader levelName={this.props.name} score={score}/>\r\n//\r\n//                 <RoundWindow\r\n//                     text={roundText}\r\n//                     answer={roundAnswer}\r\n//                     roundId={roundId}\r\n//                     goNextRound={this.goNextRound}\r\n//                     changeScore={this.changeScore}\r\n//                 />\r\n//\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\nPageLevel.propTypes = {\r\n    name: PropTypes.string,\r\n    rounds: PropTypes.array,\r\n    goPage: PropTypes.func\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\n\nReactDOM.render(<App/>, document.getElementById('root'));","import React, {useState} from 'react';\r\n\r\nimport './style.css';\r\nimport './../../hint.css';\r\n\r\nimport PageMain from \"../Pages/PageMain\";\r\nimport PageLevel from \"../Pages/PageLevel\";\r\n\r\nexport default function App (props) {\r\n    const goPage = (page) => {\r\n        setSelectedPage(page);\r\n    };\r\n\r\n    const endLevel = () => {\r\n        goPage(pageMain);\r\n    };\r\n\r\n    const startLevel = levelData => {\r\n        const newPage = <PageLevel // create level page\r\n            name={levelData.name}\r\n            rounds={levelData.rounds}\r\n            goPage={goPage}\r\n            endLevel={endLevel}\r\n        />;\r\n\r\n        goPage(newPage);\r\n    };\r\n\r\n    let pageMain = <PageMain startLevel={startLevel} />;\r\n\r\n    const [selectedPage, setSelectedPage] = useState(pageMain);\r\n\r\n    return selectedPage\r\n}\r\n"],"sourceRoot":""}