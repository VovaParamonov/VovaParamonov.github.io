{"version":3,"sources":["logo.svg","contexts/connection.ts","contexts/messages.ts","hooks/useConnection.ts","components/GlobalContext.tsx","hooks/useSocketRequests.ts","api/reuests.ts","components/MessageEditor.tsx","components/MessagesList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SocketContext","React","createContext","undefined","MessagesContext","useConnection","handlers","useState","socket","setSocket","handleSocket","event","type","JSON","parse","data","console","error","useEffect","onMessage","WebSocket","process","onmessage","log","e","connection","GlobalContext","children","messages","setMessages","message","prevState","Provider","value","useSocketRequests","useContext","sendMessage","msg","action","text","send","stringify","sendMessageRequest","MessageEditor","props","messageText","setMessageText","onChange","target","name","id","cols","rows","onClick","MessagesList","className","map","date","App","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAAe,G,MAAA,IAA0B,kC,sBCM5BA,EAAgBC,IAAMC,mBAAiCC,GCCvDC,EAAkBH,IAAMC,mBAAmCC,GC2BzDE,EAlBO,SAACC,GACrB,MAA4BC,mBAA2B,MAAvD,mBAAOC,EAAP,KAAeC,EAAf,KAEMC,EAAe,SAACC,GAChBA,EAAMC,QAAQN,EAChBA,EAASK,EAAMC,MAAOC,KAAKC,MAAMH,EAAMI,OAEvCC,QAAQC,MAAR,uCAA8CN,EAAMC,KAApD,MAA8DD,IAQlE,OAJAO,qBAAU,WACRT,EFpBsB,SAACU,GACzB,IACE,IAAMX,EAAS,IAAIY,UAAUC,6DAK7B,OAHAb,EAAOc,UAAYH,EAEnBH,QAAQO,IAAI,qCAAsCf,GAC3CA,EACP,MAAOgB,GAGP,OAFAR,QAAQO,IAAI,oDAAqDC,GAE1D,MESGC,CAAWf,MACpB,IAEIF,G,OCEMkB,EA1B0B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1C,EAAgCpB,mBAAoB,IAApD,mBAAOqB,EAAP,KAAiBC,EAAjB,KAOMrB,EAASH,EAAc,CAC3ByB,QANgB,SAACf,GACjBC,QAAQO,IAAI,oBAAqBR,GACjCc,GAAY,SAAAE,GAAS,4BAAQA,GAAR,CAAmBhB,UAQ1C,OAAKP,EAKH,cAACR,EAAcgC,SAAf,CAAwBC,MAAO,CAAEzB,OAAQA,GAAzC,SACE,cAACJ,EAAgB4B,SAAjB,CAA0BC,MAAO,CAAEL,YAAnC,SACGD,MANE,mDCJIO,EAZW,WACxB,IAAQ1B,EAAW2B,qBAAWnC,GAAtBQ,OAMR,MAAO,CACL4B,YALkB,SAACN,ICJiD,SACtEtB,EADsE,GAGlE,IACE6B,EAAM,CACVC,OAAQ,cACRC,KAHC,EADDT,SAOFtB,EAAOgC,KAAK3B,KAAK4B,UAAUJ,IDJzBK,CAAmBlC,EAAQ,CAAEsB,eEsBlBa,EAxB8C,SAACC,GAC5D,MAAsCrC,mBAAS,IAA/C,mBAAOsC,EAAP,KAAoBC,EAApB,KACQV,EAAgBF,IAAhBE,YAUR,OAAO,gCACL,0BACEH,MAAOY,EACPE,SAXiB,SAACvB,GACpBsB,EAAetB,EAAEwB,OAAOf,QAWtBgB,KAAK,aAAaC,GAAG,qBACrBC,KAAM,GACNC,KAAM,KAER,wBAAQC,QAZS,WACjBjB,EAAYS,IAWZ,sBCZWS,EAV4C,SAACV,GAC1D,IAAQhB,EAAaO,qBAAW/B,GAAxBwB,SAER,OAAO,oBAAI2B,UAAU,gBAAd,SACL3B,EAAS4B,KAAI,SAAA1B,GAAO,OAClB,mCAAwBA,EAAQ2B,KAAhC,MAA0C3B,EAAQS,OAAzCT,EAAQoB,UCkBRQ,MAnBf,WACE,OACE,cAAC,EAAD,UACE,qBAAKH,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKI,IAAKC,EAAML,UAAU,WAAWM,IAAI,SACzC,sCACO,+CADP,0BAIA,cAAC,EAAD,IACA,cAAC,EAAD,YCNKC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6c80386c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\r\n\r\ntype SocketContextType = {\r\n  socket: WebSocket;\r\n}\r\n\r\nexport const SocketContext = React.createContext<SocketContextType>(undefined!);\r\n\r\nexport const connection = (onMessage: (event: any) => void): WebSocket | null => {\r\n  try {\r\n    const socket = new WebSocket(process.env.REACT_APP_SOCKET_URL!);\r\n\r\n    socket.onmessage = onMessage;\r\n\r\n    console.log('Successfully websocket connection:', socket);\r\n    return socket;\r\n  } catch (e) {\r\n    console.log('Something went wrong while websocket connection: ', e);\r\n    // TODO: implement global API Error\r\n    return null;\r\n  }\r\n}","import React  from \"react\";\r\nimport { Message } from \"@webchat_test/messages\";\r\n\r\ntype MessagesContextType = {\r\n  messages: Message[];\r\n}\r\n\r\nexport const MessagesContext = React.createContext<MessagesContextType>(undefined!);\r\n","import { useEffect, useState } from 'react';\r\n\r\nimport { connection } from '../contexts/connection';\r\n\r\n// TODO: Moved request typing to backend\r\ntype RequestsTypes = 'message';\r\n\r\ntype Handlers = {\r\n  [key in RequestsTypes]?: (data: any) => void;\r\n}\r\n\r\ntype EventType = {\r\n  type: RequestsTypes,\r\n  data: any\r\n}\r\n\r\nconst useConnection = (handlers: Handlers) => {\r\n  const [socket, setSocket] = useState<WebSocket | null>(null);\r\n\r\n  const handleSocket = (event: EventType) => {\r\n    if (event.type in handlers) {\r\n      handlers[event.type]!(JSON.parse(event.data));\r\n    } else {\r\n      console.error(`Unhandled socket event type {${event.type}}:`, event);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    setSocket(connection(handleSocket));\r\n  }, []);\r\n\r\n  return socket;\r\n};\r\n\r\nexport default useConnection;","import React, { FunctionComponent, useState } from 'react';\n\nimport { SocketContext } from '../contexts/connection';\nimport { MessagesContext } from '../contexts/messages';\nimport useConnection from '../hooks/useConnection';\nimport { Message } from '@webchat_test/messages';\n\nconst GlobalContext: FunctionComponent = ({ children }) => {\n  const [messages, setMessages] = useState<Message[]>([]);\n\n  const onMessage = (data: Message) => {\n    console.log('Received message:', data);\n    setMessages(prevState => [...prevState, data]);\n  }\n\n  const socket = useConnection({\n    message: onMessage\n  });\n\n\n  if (!socket) {\n    return <>Loading...</>;\n  }\n\n  return (\n    <SocketContext.Provider value={{ socket: socket }}>\n      <MessagesContext.Provider value={{ messages }} >\n        {children}\n      </MessagesContext.Provider>\n    </SocketContext.Provider>\n  );\n};\n\nexport default GlobalContext;\n","import { useContext } from 'react';\r\n\r\nimport { SocketContext } from '../contexts/connection';\r\nimport { sendMessage as sendMessageRequest } from '../api/reuests';\r\n\r\nconst useSocketRequests = () => {\r\n  const { socket } = useContext(SocketContext);\r\n\r\n  const sendMessage = (message: string) => {\r\n    sendMessageRequest(socket, { message });\r\n  }\r\n\r\n  return {\r\n    sendMessage\r\n  }\r\n}\r\n\r\nexport default useSocketRequests;","import { Message } from '@webchat_test/messages';\n\ntype SocketRequest<Data> = (socket: WebSocket, data: Data) => unknown;\n\nexport const sendMessage: SocketRequest<{ message: Message['text'] }> = (\n  socket: WebSocket,\n  { message }\n) => {\n  const msg = {\n    action: 'sendmessage',\n    text: message,\n  };\n\n  socket.send(JSON.stringify(msg));\n};\n","import React, { ChangeEvent, FunctionComponent, useState } from 'react';\r\nimport useSocketRequests from \"../hooks/useSocketRequests\";\r\n\r\ntype MessageEditorProps = {\r\n\r\n}\r\n\r\nconst MessageEditor: FunctionComponent<MessageEditorProps> = (props) => {\r\n  const [messageText, setMessageText] = useState('');\r\n  const { sendMessage } = useSocketRequests();\r\n\r\n  const handleChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    setMessageText(e.target.value);\r\n  }\r\n\r\n  const handleSend = () => {\r\n    sendMessage(messageText);\r\n  }\r\n\r\n  return <div>\r\n    <textarea\r\n      value={messageText}\r\n      onChange={handleChange}\r\n      name=\"msg_editor\" id=\"msg_editr_textarea\"\r\n      cols={30}\r\n      rows={10}\r\n    />\r\n    <button onClick={handleSend} >Send</button>\r\n  </div>;\r\n}\r\n\r\nexport default MessageEditor;\r\n","import React, { FunctionComponent, useContext } from 'react';\nimport { MessagesContext } from '../contexts/messages';\n\ntype MessagesListProps = {};\n\nconst MessagesList: FunctionComponent<MessagesListProps> = (props) => {\n  const { messages } = useContext(MessagesContext);\n\n  return <ul className=\"messages_list\">{\n    messages.map(message => (\n      <li key={message.id} >[{message.date}]: { message.text }</li>\n    ))\n  }</ul>;\n};\n\nexport default MessagesList;\n","import React from 'react';\n\nimport logo from './logo.svg';\nimport './App.css';\nimport GlobalContext from \"./components/GlobalContext\";\nimport SendMessageBtn from \"./components/SendMessageBtn\";\nimport MessageEditor from \"./components/MessageEditor\";\nimport MessagesList from \"./components/MessagesList\";\n\nfunction App() {\n  return (\n    <GlobalContext>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n          <p>\n            Edit <code>src/App.tsx</code> and save to reload.\n          </p>\n\n          <MessagesList />\n          <MessageEditor/>\n          {/*<SendMessageBtn />*/}\n        </header>\n      </div>\n    </GlobalContext>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}