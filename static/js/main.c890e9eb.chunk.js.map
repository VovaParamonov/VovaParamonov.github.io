{"version":3,"sources":["contexts/connection.ts","api/reuests.ts","contexts/messages.ts","hooks/useConnection.ts","components/GlobalContext.tsx","assets/bg.mp4","assets/bg.png","components/Bg/Bg.tsx","components/UserAvatar/UserAvatar.tsx","components/MessageLisst/MessagesList.tsx","hooks/useSocketRequests.ts","components/MessageEditor/MessageEditor.tsx","components/Window/Window.tsx","components/MainSideBar/modules/UserList.tsx","components/MainSideBar/MainSideBar.tsx","components/MainWindow/MainWindow.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SocketContext","React","createContext","undefined","anyWindow","window","reconnectionCount","connection","onMessage","logger","socket","WebSocket","process","onmessage","onopen","send","JSON","stringify","action","data","requestConfig","console","log","onclose","event","setTimeout","error","clearTimeout","clearReconnectionCounterTimeOut","newConnection","e","MessagesContext","useConnection","handlers","useState","setSocket","handleSocket","eventData","parse","type","useEffect","connectionResult","slugOptions","format","partsOfSpeech","categories","noun","GlobalContext","children","messages","setMessages","connectionId","setConnectionId","users","setUsers","pushMessage","message","prevState","msg","id","Date","getTime","toString","config","userConnectionId","prevUsers","savedUsers","filter","user","connections","includes","newUsers","find","map","name","generateSlug","Provider","value","Bg","props","src","imgBgSrc","className","videoSrc","autoPlay","loop","muted","width","height","UserAvatar","size","toUpperCase","MessagesList","useContext","messagesListRef","useRef","current","scrollHeight","scrollTop","messagesJSX","date","owner","messageIndex","findIndex","continues","prevMsg","getHours","getMinutes","text","ref","useSocketRequests","sendMessage","sendMessageRequest","MessageEditor","messageText","setMessageText","handleSend","length","onKeyDown","code","preventDefault","onChange","target","cols","rows","onClick","Window","sideBar","controls","containerClassName","toolbar","UserList","MainSideBar","innerWidth","windowWidth","setWindowWidth","listener","currentTarget","addEventListener","removeEventListener","moduleSize","MainWindow","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c890e9eb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Logger } from \"../Models/Logger\";\r\nimport { requestConfig } from \"../api/reuests\";\r\n\r\ntype SocketContextType = {\r\n  socket: WebSocket;\r\n  connectionId: null | string;\r\n  users: { connectionId: string, name: string }[]\r\n}\r\n\r\nexport const SocketContext = React.createContext<SocketContextType>(undefined!);\r\n\r\nconst anyWindow = window as any;\r\n\r\nanyWindow.reconnectionCount = 0;\r\n\r\nexport const connection = (onMessage: (event: any) => void, logger?: Logger): WebSocket | null => {\r\n  try {\r\n    const socket = new WebSocket(process.env.REACT_APP_SOCKET_URL!);\r\n\r\n    socket.onmessage = onMessage;\r\n\r\n    socket.onopen = () => {\r\n      requestConfig(socket, {});\r\n      console.log('Requested configuration');\r\n    };\r\n\r\n    socket.onclose = (event) => {\r\n      console.log('Socket closed by event:', event);\r\n\r\n      console.log('Trying to reconnect...');\r\n      setTimeout(() => {\r\n        if (anyWindow.reconnectionCount >= 4) {\r\n          console.error('Too many reconnection attempts');\r\n          if (logger) {\r\n            logger('There are too many reconnection attempts. You are disconnected', \"error\");\r\n          }\r\n          return;\r\n        }\r\n        anyWindow.reconnectionCount++;\r\n        console.log(\"!!!!!: \", anyWindow.reconnectionCount);\r\n        clearTimeout((window as any).clearReconnectionCounterTimeOut);\r\n\r\n        try {\r\n          const newConnection = connection(onMessage, logger);\r\n\r\n          (window as any).clearReconnectionCounterTimeOut = setTimeout(() => {\r\n            anyWindow.reconnectionCount = 0\r\n          }, 10000);\r\n          console.log('Successfully reconnected: ', newConnection);\r\n        } catch (e) {\r\n          console.error(\"Error of reconnection: \", e);\r\n          if (logger) {\r\n            logger('You were disconnected from the chat', 'error');\r\n          }\r\n        }\r\n      }, 1000);\r\n    }\r\n\r\n    console.log('Successfully websocket connection:', socket);\r\n\r\n    return socket;\r\n  } catch (e) {\r\n    console.log('Something went wrong while websocket connection: ', e);\r\n    if (logger) {\r\n      logger('You were disconnected from the chat', 'error');\r\n    }\r\n    // TODO: implement global API Error\r\n    return null;\r\n  }\r\n}","import { Message } from '@webchat_test/messages';\nimport socketEvents from \"@webchat_test/messages/dist/srv/socketEvents\";\n\ntype SocketRequest<Data> = (socket: WebSocket, data: Data) => unknown;\n\nexport const sendMessage: SocketRequest<{ data: Message['text'] }> = (\n  socket: WebSocket,\n  { data }\n) => {\n  const msg = {\n    action: 'sendmessage',\n    data: {\n      action: 'message',\n      data\n    },\n  };\n\n  socket.send(JSON.stringify(msg));\n};\n\nexport const requestConfig: SocketRequest<{}> = (socket) => {\n  const msg = {\n    // TODO: Add new route to socket in API gateway and use another action type (for example 'config')\n    action: 'sendmessage',\n    data: {\n      action: 'config'\n    }\n  }\n\n  socket.send(JSON.stringify(msg));\n}","import React  from \"react\";\r\nimport { Message } from \"../Models/Message\";\r\nimport { Logger, SystemMessage } from \"../Models/Logger\";\r\n\r\ntype MessagesContextType = {\r\n  messages: (Message | SystemMessage)[];\r\n  log: Logger,\r\n}\r\n\r\nexport const MessagesContext = React.createContext<MessagesContextType>(undefined!);\r\n","import { useEffect, useState } from 'react';\r\n\r\nimport { connection } from '../contexts/connection';\r\nimport { Logger } from \"../Models/Logger\";\r\nimport { SocketEventType, SocketEvents } from \"@webchat_test/messages\";\r\n\r\ntype Handlers = {\r\n  [key in SocketEventType]: (data: SocketEvents[key]['data']) => void;\r\n}\r\n\r\ntype EventType = {\r\n  type: SocketEventType,\r\n  data: any\r\n}\r\n\r\nconst useConnection = (handlers: Handlers, log?: Logger) => {\r\n  const [socket, setSocket] = useState<WebSocket | null>(null);\r\n\r\n\r\n  const handleSocket = (event: EventType) => {\r\n    console.log('Got event:', event);\r\n\r\n    const eventData = JSON.parse(event.data);\r\n\r\n    if (eventData.type in handlers) {\r\n      handlers[eventData.type as SocketEventType]!(eventData.data);\r\n    } else {\r\n      console.error(`Unhandled socket event type {${eventData.type}}:`, event);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const connectionResult = connection(handleSocket, log)\r\n\r\n    setSocket(connectionResult);\r\n\r\n    if (log && connectionResult) {\r\n      log('Successful connection to the chat. You can chat');\r\n    }\r\n  }, []);\r\n\r\n  return socket;\r\n};\r\n\r\nexport default useConnection;","import React, { FunctionComponent, useState } from 'react';\n\nimport { SocketContext } from '../contexts/connection';\nimport { MessagesContext } from '../contexts/messages';\nimport useConnection from '../hooks/useConnection';\nimport { Message } from '../Models/Message';\nimport { Logger, SystemMessage } from \"../Models/Logger\";\nimport { UserConfig} from \"@webchat_test/messages/\";\nimport { generateSlug } from \"random-word-slugs\";\n\nconst slugOptions = {\n  format: \"title\",\n  partsOfSpeech: [\"noun\"],\n  categories: {\n    noun: [\"animals\"],\n  },\n};\n\n\nconst GlobalContext: FunctionComponent = ({ children }) => {\n  const [messages, setMessages] = useState<(Message | SystemMessage)[]>([]);\n  const [connectionId, setConnectionId] = useState<null | string>(null);\n  const [users, setUsers] = useState<{connectionId: string, name: string}[]>([]);\n\n  const onMessage = (data: Message) => {\n    console.log('Received message:', data);\n    setMessages((prevState) => [...prevState, data]);\n  };\n\n  const onConfig = (data: UserConfig) => {\n    console.log('Received config: ', data);\n\n    setConnectionId(data.userConnectionId);\n    setUsers(prevUsers => {\n      const savedUsers = prevUsers.filter(user => data.connections.includes(user.connectionId));\n      const newUsers = data.connections\n        .filter(id => !prevUsers.find(user => user.connectionId === id))\n        .map(id => ({\n          connectionId: id,\n          name: generateSlug(1, slugOptions as any)\n        }));\n\n      return [...savedUsers, ...newUsers];\n    });\n  }\n\n  const pushMessage = (message: Message | SystemMessage) => {\n    setMessages((prevState) => [...prevState, message]);\n  }\n\n  const log: Logger = (message: string, type= 'info') => {\n    pushMessage({\n      type,\n      msg: message,\n      id: new Date().getTime().toString()\n    });\n  }\n\n  const socket = useConnection({\n    message: onMessage,\n    config: onConfig\n  }, log);\n\n  if (!socket) {\n    return <>Loading...</>;\n  }\n\n  return (\n    <SocketContext.Provider\n      value={{ socket: socket, connectionId, users }}\n    >\n      <MessagesContext.Provider value={{ messages, log }}>\n        {children}\n      </MessagesContext.Provider>\n    </SocketContext.Provider>\n  );\n};\n\nexport default GlobalContext;","export default __webpack_public_path__ + \"static/media/bg.30eec6b5.mp4\";","export default __webpack_public_path__ + \"static/media/bg.4f5e476d.png\";","import React, { FunctionComponent } from 'react';\r\nimport './Bg.css';\r\n//@ts-ignore\r\nimport videoSrc from '../../assets/bg.mp4';\r\nimport imgBgSrc from '../../assets/bg.png';\r\n\r\ntype BgProps = {\r\n\r\n}\r\n\r\nconst Bg: FunctionComponent<BgProps> = (props) => {\r\n  return <>\r\n    <img\r\n      src={imgBgSrc}\r\n      className=\"static_bg\"\r\n    />\r\n    <video\r\n      className=\"live_bg\"\r\n      src={videoSrc}\r\n      autoPlay={true}\r\n      loop={true}\r\n      muted={true}\r\n      width=\"100%\"\r\n      height=\"100%\"\r\n    />\r\n  </>;\r\n}\r\n\r\nexport default Bg;\r\n","import React, { FunctionComponent, useContext } from 'react';\r\nimport './UserAvatar.css';\r\n\r\ntype UserAvatarProps = {\r\n  name: string;\r\n  size?: 'micro' | 'std' | 'min'\r\n}\r\n\r\nconst UserAvatar: FunctionComponent<UserAvatarProps> = ({name, size}) => {\r\n  return <div className={`user__avatar ${size === 'micro' ? 'micro' : ''}`}>\r\n    <span>{name[0].toUpperCase()}</span>\r\n  </div>;\r\n}\r\n\r\nexport default UserAvatar;\r\n","import React, { FunctionComponent, useContext, useEffect, useRef } from 'react';\nimport { MessagesContext } from '../../contexts/messages';\nimport './MessageList.css';\nimport { SocketContext } from \"../../contexts/connection\";\nimport UserAvatar from \"../UserAvatar/UserAvatar\";\n\ntype MessagesListProps = {};\n\nconst MessagesList: FunctionComponent<MessagesListProps> = (props) => {\n  const { messages } = useContext(MessagesContext);\n  const { connectionId, users } = useContext(SocketContext);\n  const messagesListRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (messagesListRef.current) {\n      console.log(messagesListRef.current.scrollHeight);\n      messagesListRef.current.scrollTop = messagesListRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  const messagesJSX = messages.map(message => {\n    if ('type' in message) {\n      return (\n        <li className={`message--system message--system--${message.type}`} key={message.id} >\n          { message.msg }\n        </li>\n      );\n    } else {\n      const date = new Date(message.date);\n\n      const user = users.find(user => user.connectionId === message.owner);\n\n      const messageIndex = messages.findIndex(msg => msg.id === message.id);\n\n      let continues = false;\n\n      if (messageIndex !== 0) {\n        const prevMsg = messages[messageIndex - 1];\n\n        continues = 'owner' in prevMsg && prevMsg.owner === message.owner;\n      }\n\n\n      return (\n        <li className={`message_wrapper ${message.owner === connectionId ? 'my' : '' } ${continues ? 'continues': ''}`}>\n          { user && (\n            <UserAvatar\n              name={user.name}\n              size={'micro'}\n            />\n          )}\n          <div className={`message ${message.owner === connectionId ? 'my' : '' }`} key={message.id} >\n            <span className={\"message__time\"} >{date.getHours()}:{date.getMinutes()}</span>\n            <span className=\"message__text\">\n              { message.text }\n            </span>\n          </div>\n        </li>\n      );\n    }\n  })\n\n  return <div ref={messagesListRef} className=\"messages_list_wrapper\">\n    <ul className=\"messages_list\">\n      {messagesJSX}\n    </ul>\n  </div>;\n};\n\nexport default MessagesList;\n","import { useContext } from 'react';\r\n\r\nimport { SocketContext } from '../contexts/connection';\r\nimport { sendMessage as sendMessageRequest } from '../api/reuests';\r\nimport { MessagesContext } from \"../contexts/messages\";\r\n\r\nconst useSocketRequests = () => {\r\n  const { socket } = useContext(SocketContext);\r\n  const { log } = useContext(MessagesContext);\r\n\r\n  const sendMessage = (message: string) => {\r\n    try {\r\n      sendMessageRequest(socket, { data: message });\r\n    } catch (e) {\r\n      log('Something went wrong with sending', 'error');\r\n    }\r\n  }\r\n\r\n  return {\r\n    sendMessage\r\n  }\r\n}\r\n\r\nexport default useSocketRequests;","import React, { ChangeEvent, FunctionComponent, useState } from 'react';\r\nimport useSocketRequests from \"../../hooks/useSocketRequests\";\r\nimport './MessageEditor.css';\r\n\r\ntype MessageEditorProps = {\r\n\r\n}\r\n\r\nconst MessageEditor: FunctionComponent<MessageEditorProps> = (props) => {\r\n  const [messageText, setMessageText] = useState('');\r\n  const { sendMessage } = useSocketRequests();\r\n\r\n  const validation = () => {\r\n    if (messageText.length <= 0) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  const handleChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    setMessageText(e.target.value);\r\n  }\r\n\r\n  const handleSend = () => {\r\n    if (validation()) {\r\n      setMessageText('');\r\n      sendMessage(messageText);\r\n    }\r\n  }\r\n\r\n  const handleKey = (event: any) => {\r\n    if (event.code === 'Enter') {\r\n      handleSend();\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  return <div className={'message_editor_container'}>\r\n    <textarea\r\n      onKeyDown={handleKey}\r\n      value={messageText}\r\n      onChange={handleChange}\r\n      name=\"msg_editor\"\r\n      id=\"msg_editor_textarea\"\r\n      cols={5}\r\n      rows={10}\r\n    />\r\n    <button onClick={handleSend} className=\"message_editor__send_button\" />\r\n  </div>;\r\n}\r\n\r\nexport default MessageEditor;\r\n","import React, { CSSProperties, FunctionComponent } from 'react';\r\nimport './Window.css';\r\n\r\ntype WindowProps = {\r\n  controls?: boolean;\r\n  toolbar?: React.ReactNode;\r\n  sideBar?: React.ReactNode;\r\n  className?: string\r\n  width?: CSSProperties['width'],\r\n  height?: CSSProperties['height'],\r\n  containerClassName?: string\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst Window: FunctionComponent<WindowProps> = (props) => {\r\n  const {\r\n    className,\r\n    children,\r\n    sideBar,\r\n    containerClassName,\r\n    controls,\r\n    toolbar\r\n  } = props;\r\n\r\n  return <div className={`window ${className || ''}`}>\r\n    <div className=\"window__header\">\r\n      <div className=\"window_header__container\">\r\n        { controls && <div className=\"window__controls\" />}\r\n        { toolbar || null }\r\n      </div>\r\n    </div>\r\n    <div className='window__inner' >\r\n      { sideBar && (\r\n        <div className=\"window__sidebar\">\r\n          {sideBar}\r\n        </div>\r\n      )}\r\n      <div className=\"window__content\">\r\n        {children}\r\n      </div>\r\n    </div>\r\n  </div>;\r\n}\r\n\r\nexport default Window;\r\n","import React, { FunctionComponent, useContext, useEffect, useState } from 'react';\r\nimport './UserList.css';\r\nimport { SocketContext } from \"../../../contexts/connection\";\r\nimport UserAvatar from \"../../UserAvatar/UserAvatar\";\r\n\r\ntype UserListProps = {\r\n  size?: 'min' | 'micro' | 'std'\r\n}\r\n\r\n// TODO: remove mocks\r\nconst mockedData = [\r\n  {\r\n    id: 'someid',\r\n    userName: 'Username'\r\n  },\r\n  {\r\n    id: 'someid23',\r\n    userName: 'Vladimir',\r\n    owner: true\r\n  }\r\n];\r\n\r\nconst UserList: FunctionComponent<UserListProps> = ({ size }) => {\r\n  const { users, connectionId } = useContext(SocketContext);\r\n\r\n  return (\r\n    <ul className={`main_sidebar__user_list ${size}`}>\r\n      { users.map(user => {\r\n        return (\r\n          <li key={user.connectionId} className={`user_list__user ${user.connectionId == connectionId ? 'my' : ''}`} >\r\n            <UserAvatar size={size} name={user.name} />\r\n            {!(size === 'min' || size === 'micro') && <span className=\"user__name\">{ user.name }</span>}\r\n          </li>\r\n        )\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default UserList;\r\n","import React, { FunctionComponent, useEffect, useState } from 'react';\r\nimport './MainSideBar.css';\r\nimport UserList from \"./modules/UserList\";\r\n\r\ntype MainSideBarProps = {\r\n\r\n}\r\n\r\nconst MainSideBar: FunctionComponent<MainSideBarProps> = (props) => {\r\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n\r\n  useEffect(() => {\r\n    const listener = (event: UIEvent) => {\r\n      setWindowWidth((event.currentTarget! as Window).innerWidth);\r\n    }\r\n    window.addEventListener('resize', listener);\r\n\r\n    return () => window.removeEventListener('resize', listener);\r\n  }, []);\r\n\r\n  const moduleSize = windowWidth < 500 ? 'micro' : windowWidth < 600 ? 'min' : 'std'\r\n\r\n  return <div className={`main_sidebar ${moduleSize}`} >\r\n    <div className=\"main_sidebar__inner main_sidebar__container\">\r\n      <h3 className=\"main_sidebar__title\" >Users</h3>\r\n      <UserList size={moduleSize} />\r\n    </div>\r\n  </div>;\r\n}\r\n\r\nexport default MainSideBar;\r\n","import React, { FunctionComponent } from 'react';\r\nimport MessagesList from \"../MessageLisst/MessagesList\";\r\nimport MessageEditor from \"../MessageEditor/MessageEditor\";\r\nimport Window from \"../Window/Window\";\r\nimport './MainWindow.css';\r\nimport MainSideBar from \"../MainSideBar/MainSideBar\";\r\n\r\ntype MainWindowProps = {\r\n\r\n}\r\n\r\nconst MainWindow: FunctionComponent<MainWindowProps> = (props) => {\r\n  return (\r\n    <Window\r\n      className={'main_window'}\r\n      controls\r\n      sideBar={<MainSideBar />}\r\n    >\r\n      <div className=\"main_window__container\">\r\n        <MessagesList />\r\n        <MessageEditor/>\r\n      </div>\r\n    </Window>\r\n  );\r\n}\r\n\r\nexport default MainWindow;\r\n","import React from 'react';\nimport './App.css';\nimport GlobalContext from \"./components/GlobalContext\";\nimport Bg from \"./components/Bg/Bg\";\nimport MainWindow from \"./components/MainWindow/MainWindow\";\n\nfunction App() {\n  return (\n    <GlobalContext>\n      <div className=\"App\">\n        <Bg />\n        <div className=\"app__container\">\n          <MainWindow />\n        </div>\n      </div>\n    </GlobalContext>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}