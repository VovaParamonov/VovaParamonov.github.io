{"version":3,"sources":["img/Eni-min.svg","Components/LevelCreater/RoundCreater/RoundTypeSelect/index.jsx","Components/LevelCreater/RoundCreater/index.jsx","funcs.js","hooks.js","Components/LevelCreater/index.jsx","defaultLevels.js","Components/Header/index.jsx","Components/LevelCard/index.jsx","Components/LevelsList/index.jsx","Components/RightBar/index.js","Components/Pages/PageMain/index.jsx","Components/LevelHeader/index.jsx","Components/RoundWindows/RoundWrite/index.jsx","Components/RoundWindows/RoundSelect/index.jsx","Components/Pages/PageLevel/index.jsx","index.js","Components/App/index.jsx"],"names":["module","exports","__webpack_require__","p","RoundTypeSelect","props","_useState","useState","_useState2","Object","slicedToArray","isOpen","setIsOpen","roundMods","react_default","a","createElement","className","concat","onClick","e","preventDefault","mode","Transition","in","timeout","enter","exit","unmountOnExit","state","filter","el","map","key","changeMode","roundId","RoundCreater","questionHref","React","createRef","answerHrefs","type","placeholder","value","question","onChange","changeQuestion","current","ref","answer","id","push","answerId","text","toLowerCase","changeAnswer","addAnswer","randomInteger","min","max","rand","Math","random","round","getCookie","name","matches","document","cookie","match","RegExp","decodeURIComponent","undefined","setCookie","date","Date","setDate","getDate","toUTCString","Round","newId","newText","newAnswer","newMode","classCallCheck","this","useLevelCtreater","title","setTitle","_useState3","_useState4","description","setDescription","_useState5","_useState6","rounds","setRounds","titleRef","descriptionRef","changer","rId","newRounds","slice","ans","ansId","addater","length","alert","newLevel","addLevel","usePageLevel","_useState7","_useState8","roundSelected","setRoundSelected","_useState9","_useState10","roundsCompleted","setRoundsCompleted","_useState11","_useState12","score","setScore","_useState13","_useState14","err","setErr","_useState15","_useState16","right","setRight","_useState17","startTime","_useState19","_useState20","exitLevel","JSON","stringify","levelName","error","speed","completed","getMonth","getHours","getMinutes","endLevel","find","selectedNow","nextRoundId","indexOf","changes","console","log","setTimeout","LevelCreater","_useLevelCtreater","_useLevelCtreater2","addator","create","levelCreaterToggle","action","defaultLevels","Header","src","require","alt","LevelCard","deleteSelf","deleteCard","target","startLevel","LevelsList","levels","elem","RightBar","statistic","parse","PageMain","setLevels","levelCreater","setLevelCreater","cardId","newLevels","aria-label","LevelHeader","style","width","RoundWindow","buttonActive","setButtonActive","exitMode","setExitMode","show","setShow","roundInput","useEffect","checkAnswer","getAnswer","replace","trim","changeScore","getElementsByClassName","buttonActivate","buttonText","buttonClassName","onExited","goNextRound","animationClassName","onSubmit","RoundSelect","answers","setAnswers","answersHrefs","array","nextIndex","indexArr","i","_","arr","shuffleArray","answerChecked","checked","forEach","htmlFor","PageLevel","roundElement","_usePageLevel","_usePageLevel2","ReactDOM","render","goPage","page","setSelectedPage","pageMain","levelData","newPage","selectedPage","getElementById"],"mappings":"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","file":"static/js/main.213c7640.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Eni-min.95eae398.svg\";","import React, {useState} from 'react';\r\n\r\nimport { Transition } from \"react-transition-group\";\r\n\r\nimport './style.css';\r\n\r\nexport default function RoundTypeSelect (props) {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    let roundMods = [\"Write\", \"Select\"];\r\n\r\n    let toggleView = e => {\r\n        e.preventDefault();\r\n        setIsOpen(!isOpen);\r\n    };\r\n\r\n    return (\r\n        <div className={`create-round__type_select ${(isOpen? \"opened\":\"\")}`}>\r\n            <button onClick={toggleView}><span>{props.mode}</span><i className={`fas fa-chevron-${(isOpen) ? \"left\" : \"right\"}`}/></button>\r\n            <Transition\r\n                in={isOpen}\r\n                timeout={{\r\n                    enter: 0,\r\n                    exit: 500\r\n                }}\r\n                unmountOnExit={true}\r\n            >\r\n                {state => (\r\n                    <ul className={`type_select__ul-${state}`}>{\r\n                        roundMods.filter(el => el !== props.mode)\r\n                            .map(el => <li key={el} onClick={() => {\r\n                                props.changeMode(props.roundId, el);\r\n                                setIsOpen(!isOpen);\r\n                            }}>{el}</li>)\r\n                    }</ul>\r\n                )\r\n            }\r\n            </Transition>\r\n\r\n            {/*{(isOpen)? <ul>{*/}\r\n                {/*roundMods.filter(el=>el!==props.mode)*/}\r\n                    {/*.map(el=><li key={el} onClick={()=>{*/}\r\n                        {/*props.changeMode(props.roundId, el);*/}\r\n                        {/*setIsOpen(!isOpen);*/}\r\n                    {/*}}>{el}</li>)*/}\r\n            {/*}</ul>:\"\"}*/}\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport RoundTypeSelect from './RoundTypeSelect';\r\n\r\nimport './style.css';\r\n\r\nexport default function RoundCreater(props) {\r\n\r\n\r\n    let questionHref = React.createRef();\r\n    let answerHrefs = [];\r\n\r\n    function addAnswer(e) {\r\n        e.preventDefault();\r\n        props.addAnswer(props.roundId);\r\n    }\r\n\r\n    function changeQuestion() {\r\n        props.changeQuestion(props.roundId, questionHref.current.value);\r\n    }\r\n    function changeAnswer(answerId) {\r\n        const text = answerHrefs[answerId].current.value.toLowerCase();\r\n        props.changeAnswer(props.roundId, answerId, text);\r\n    }\r\n\r\n    return(\r\n        <div className=\"create-round-wrapper\">\r\n            <RoundTypeSelect mode={props.mode} changeMode={props.changeMode} roundId={props.roundId}/>\r\n            <input\r\n                className='create-round__input'\r\n                type=\"text\"\r\n                placeholder=\"Вопрос\"\r\n                value={props.question}\r\n                onChange={changeQuestion}\r\n                ref={questionHref}\r\n            />\r\n            {\r\n                props.answer.map((answer,id) => {\r\n                    answerHrefs.push(React.createRef());\r\n                    return(\r\n                            <input\r\n                                className={`create-round__input round_answer ${(props.mode===\"Select\"&&id===0)?\"round_answer-right\":\"\"}`}\r\n                                key={`${props.roundId}-${id}`}\r\n                                type=\"text\"\r\n                                placeholder={`${(props.mode===\"Select\"&&id===0)?\r\n                                    \"Правильный ответ\":\r\n                                    (props.mode===\"Select\")?\r\n                                        `Вариант ответа №${id+1}`:\r\n                                        `Ответ №${id+1}`}`}\r\n                                value={answer}\r\n                                onChange={()=>changeAnswer(id)}\r\n                                ref={answerHrefs[id]}\r\n                            />\r\n                        )\r\n                })\r\n            }\r\n            <button className=\"create-round__add-btn\" onClick={addAnswer}><i className=\"far fa-plus-square\"></i></button>\r\n        </div>\r\n    );\r\n}","function randomInteger(min, max) {\r\n    let rand = min - 0.5 + Math.random() * (max - min + 1);\r\n    rand = Math.round(rand);\r\n    return rand;\r\n}\r\n\r\nfunction shuffleArray(array) {\r\n    let indexArr = [];\r\n    let nextIndex;\r\n    for (let i = 0; i < array.length; i++) {\r\n        do {\r\n            nextIndex = randomInteger(0, array.length-1);\r\n        } while (indexArr.indexOf(nextIndex) !== -1);\r\n        indexArr[i] = nextIndex;\r\n    }\r\n    return array.map((_, id, arr) => {\r\n        return arr[indexArr[id]]\r\n    })\r\n}\r\n\r\n//-----cookies\r\n// возвращает cookie с именем name, если есть, если нет, то undefined\r\nfunction getCookie(name) {\r\n    let matches = document.cookie.match(new RegExp(\r\n        //\"(?:^|; )\" + name.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, '\\\\$1') + \"=([^;]*)\"\r\n        \"(?:^|; )\" + name + \"=([^;]*)\"\r\n    ));\r\n    return matches ? decodeURIComponent(matches[1]) : undefined;\r\n}\r\n\r\nfunction setCookie(cookie, value) {\r\n    let date = new Date();\r\n    date.setDate(date.getDate() + 365);\r\n    date = date.toUTCString();\r\n    document.cookie = `${cookie}=${value};path=/;expires=${date}`;\r\n}\r\n\r\nfunction deleteCookie(cookie) {\r\n    let date = new Date(0).toUTCString();\r\n    document.cookie = `${cookie}=;path=/;expires=${date}`\r\n}\r\n\r\nexport { randomInteger, getCookie, setCookie, deleteCookie, shuffleArray }\r\n","import React, { useState }from 'react';\r\nimport {randomInteger, setCookie} from \"./funcs\";\r\n\r\nclass Round {\r\n    constructor(newId, newText, newAnswer, newMode) {\r\n        this.id = newId || this.id;\r\n        this.text = newText || this.text;\r\n        this.answer = newAnswer || this.answer;\r\n        this.mode = newMode || this.mode\r\n    }\r\n    id = 1;\r\n    text ='';\r\n    answer = [''];\r\n    mode = \"Write\";\r\n}\r\n\r\nconst useLevelCtreater = props => {\r\n    const [title, setTitle] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [rounds, setRounds] = useState([new Round()]);\r\n\r\n    const titleRef = React.createRef();\r\n    const descriptionRef = React.createRef();\r\n\r\n    const addRound = (e) => {\r\n        e.preventDefault();\r\n        setRounds(rounds.concat([new Round(rounds.length+1)]));\r\n    };\r\n\r\n    const addAnswer = (roundId) => {\r\n        setRounds(rounds.map((round,id) => {\r\n            if (id === roundId){\r\n                round.answer.push('');\r\n            }\r\n            return round\r\n        }));\r\n    };\r\n\r\n    const changeTitle = () => {\r\n        setTitle(titleRef.current.value);\r\n    };\r\n\r\n    const changeDescription = () => {\r\n        setDescription(descriptionRef.current.value);\r\n    };\r\n\r\n    const changeQuestion = (roundId, text) => {\r\n        setRounds(rounds.map((round,rId) => {\r\n            if (rId === roundId) {\r\n                round.text = text\r\n            }\r\n            return round;\r\n        }));\r\n    };\r\n\r\n    const changeAnswer = (roundId, answerId, text) => {\r\n        let newRounds = rounds.slice();\r\n\r\n        newRounds = newRounds.map((round,rId) => {\r\n            if (rId === roundId) {\r\n                round.answer = round.answer.map((ans, ansId) => {\r\n                    if (ansId === answerId) {\r\n                        return text;\r\n                    } else {\r\n                        return ans;\r\n                    }\r\n                });\r\n            }\r\n            return round;\r\n        });\r\n\r\n        setRounds(newRounds.slice());\r\n    };\r\n\r\n    const changeMode = (roundId, newMode) => {\r\n        setRounds(rounds.map((round, rId) => {\r\n            if (rId === roundId) {\r\n                round.mode = newMode;\r\n            }\r\n\r\n            return round;\r\n        }));\r\n    };\r\n\r\n    const changer = {\r\n        title: changeTitle,\r\n        description: changeDescription,\r\n        question: changeQuestion,\r\n        answer: changeAnswer,\r\n        mode: changeMode\r\n    };\r\n\r\n    const addater = {\r\n        round: addRound,\r\n        answer: addAnswer\r\n    };\r\n\r\n    const create = (e) => {\r\n        e.preventDefault();\r\n        if (rounds.length <= 2)\r\n            return alert('В уровне должно быть больше двух раундов');\r\n        let newLevel = {\r\n            id: 'none',\r\n            name: title || 'MyLevel',\r\n            description: description,\r\n            rounds: rounds\r\n        };\r\n        props.addLevel(newLevel);\r\n    };\r\n\r\n    return [\r\n        title, description, rounds,\r\n        addater,\r\n        changer,\r\n        create,\r\n        titleRef, descriptionRef\r\n    ]\r\n};\r\n\r\nconst usePageLevel = (props) => {\r\n    const [roundSelected, setRoundSelected] = useState(1);\r\n    const [roundsCompleted, setRoundsCompleted] = useState([]);\r\n    const [score, setScore] = useState(0);\r\n    const [err, setErr] = useState(0);\r\n    const [right, setRight] = useState(0);\r\n    const [startTime] = useState(new Date());\r\n    const [nextRound, setNextRound] = useState(null);\r\n\r\n\r\n\r\n    const goNextRound =(selectedNow) => {\r\n        let nextRoundId = randomInteger(1, props.rounds.length);\r\n        while(roundsCompleted.indexOf(nextRoundId) !== -1 || nextRoundId === roundSelected){\r\n            nextRoundId = randomInteger(1, props.rounds.length);\r\n        }\r\n\r\n        setRoundSelected(nextRoundId);\r\n\r\n        if (roundsCompleted.length === props.rounds.length-2){\r\n            setRoundsCompleted([selectedNow]);\r\n        } else {\r\n            setRoundsCompleted(roundsCompleted.concat(selectedNow));\r\n        }\r\n    };\r\n\r\n    const changeScore = (changes) => {\r\n        (changes > 0)?\r\n            setRight(right+1):\r\n            setErr(err+1);\r\n\r\n        console.log(right);\r\n\r\n        if (changes < 0){\r\n            if (score === 0) {\r\n                return\r\n            }\r\n        } else if (score >= 9) {\r\n            setTimeout(exitLevel, 1000);\r\n        }\r\n\r\n        setScore(score+changes);\r\n    };\r\n\r\n    const exitLevel = () => {\r\n        const date = new Date();\r\n        setCookie('lastStatistic', JSON.stringify(\r\n            {\r\n                levelName: props.name,\r\n                error: err,\r\n                right: right+1,\r\n                speed: (date - startTime) / 1000,\r\n                completed: `${date.getMonth()+1}.${date.getDate()} ${date.getHours()}:${date.getMinutes()}`\r\n            }\r\n        ));\r\n        props.endLevel();\r\n    };\r\n\r\n    let round = props.rounds.find((round) => (\r\n        round.id === roundSelected)\r\n    );\r\n\r\n    return [\r\n        score, round,\r\n        goNextRound,\r\n        changeScore\r\n    ]\r\n};\r\n\r\nexport { useLevelCtreater, usePageLevel };\r\n","import React from 'react';\r\n\r\nimport RoundCreater from \"./RoundCreater\";\r\nimport { useLevelCtreater } from '../../hooks'\r\n\r\nimport './style.css';\r\n\r\n\r\nexport default function LevelCreater (props) {\r\n    const [\r\n        title, description, rounds,\r\n        addator, // has methods for add: round, answer\r\n        changer, // has methods for change: title,description,question,answer\r\n        create,\r\n        titleRef, descriptionRef\r\n    ] = useLevelCtreater(props);\r\n\r\n    return (\r\n        <div className=\"create-window\">\r\n            <button onClick={props.levelCreaterToggle} className='level-creater__exit-btn' ><i className=\"far fa-times-circle\"></i></button>\r\n            <form action=\"#\" className=\"create-form\">\r\n                <div className='level-create__head'>\r\n                    <input\r\n                        className='level-creat__title'\r\n                        ref={titleRef}\r\n                        type=\"text\"\r\n                        value={title}\r\n                        placeholder='Name of level'\r\n                        onChange={changer.title}\r\n                    />\r\n                    <input\r\n                        className='level-creat__description'\r\n                        ref={descriptionRef}\r\n                        type=\"text\"\r\n                        value={description}\r\n                        placeholder='Description'\r\n                        onChange={changer.description}\r\n                    />\r\n                </div>\r\n                {\r\n                    rounds.map((round,id) => (\r\n                        <RoundCreater\r\n                            key={id}\r\n                            roundId={id}\r\n                            question={round.text}\r\n                            answer={round.answer}\r\n                            mode={round.mode}\r\n                            addAnswer={addator.answer}\r\n                            changeQuestion={changer.question}\r\n                            changeAnswer={changer.answer}\r\n                            changeMode={changer.mode}\r\n                        />\r\n                    ))\r\n                }\r\n                <button className=\"create-round__add-btn create-round__add-round-btn\" onClick={addator.round}><i className=\"far fa-plus-square\"></i></button>\r\n            </form>\r\n            <button className=\"create-window__create-button\" onClick={create}>Создать</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n// export default class LevelCreater extends Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//\r\n//         this.state = {\r\n//             title:'',\r\n//             description:'',\r\n//             rounds: [\r\n//                 {\r\n//                     id: 1,\r\n//                     text: '',\r\n//                     answer: ['']\r\n//                 }\r\n//             ]\r\n//         };\r\n//\r\n//         this.titleRef = React.createRef();\r\n//         this.descriptionRef = React.createRef();\r\n//     }\r\n//\r\n//     addRound = (e) => {\r\n//         e.preventDefault();\r\n//         this.setState(oldState => {\r\n//             return {\r\n//                 rounds: oldState.rounds.concat([{\r\n//                     id: oldState.rounds.length+1,\r\n//                     text: '',\r\n//                     answer: ['']\r\n//                 }])\r\n//             }\r\n//         })\r\n//     };\r\n//\r\n//     addAnswer = (roundId) => {\r\n//         this.setState(oldState => {\r\n//             return {\r\n//                 rounds: oldState.rounds.map((round,id) => {\r\n//                     if (id === roundId){\r\n//                         round.answer.push('');\r\n//                     }\r\n//                     return round\r\n//                 })\r\n//             }\r\n//         })\r\n//     };\r\n//\r\n//     changeTitle = () => {\r\n//         this.setState({\r\n//             title: this.titleRef.current.value\r\n//         })\r\n//     };\r\n//     changeDescription = () => {\r\n//         this.setState({\r\n//             description: this.descriptionRef.current.value\r\n//         })\r\n//     };\r\n//\r\n//     changeQuestion = (roundId, text) => {\r\n//         this.setState(oldState => {\r\n//             return {\r\n//                 rounds: oldState.rounds.map((round,rId) => {\r\n//                     if (rId === roundId) {\r\n//                         round.text = text\r\n//                     }\r\n//                     return round;\r\n//                 })\r\n//             }\r\n//         });\r\n//     };\r\n//\r\n//     changeAnswer = (roundId, answerId, text) => {\r\n//         this.setState(oldState => {\r\n//             let newRounds = oldState.rounds.slice();\r\n//\r\n//             newRounds = newRounds.map((round,rId) => {\r\n//                 if (rId === roundId) {\r\n//                     round.answer = round.answer.map((ans, ansId) => {\r\n//                         if (ansId === answerId) {\r\n//                             return text;\r\n//                         } else {\r\n//                             return ans;\r\n//                         }\r\n//                     });\r\n//                 }\r\n//                 return round;\r\n//             });\r\n//\r\n//             return {\r\n//                 rounds: newRounds.slice()\r\n//             }\r\n//         })\r\n//     };\r\n//\r\n//     create = (e) => {\r\n//         e.preventDefault();\r\n//         if (this.state.rounds.length <= 2)\r\n//             return alert('В уровне должно быть больше двух раундов');\r\n//         let newLevel = {\r\n//             id: 'none',\r\n//             name: this.state.title || 'MyLevel',\r\n//             description: this.state.description,\r\n//             rounds: this.state.rounds\r\n//         };\r\n//         this.props.addLevel(newLevel);\r\n//     };\r\n//\r\n//     render() {\r\n//         return (\r\n//             <div className=\"create-window\">\r\n//                 <button onClick={this.props.levelCreaterToggle} className='level-creater__exit-btn' ><i className=\"far fa-times-circle\"></i></button>\r\n//                 <form action=\"#\" className=\"create-form\">\r\n//                     <div className='level-create__head'>\r\n//                         <input\r\n//                             className='level-creat__title'\r\n//                             ref={this.titleRef}\r\n//                             type=\"text\"\r\n//                             value={this.state.title}\r\n//                             placeholder='Название'\r\n//                             onChange={this.changeTitle}\r\n//                         />\r\n//                         <input\r\n//                             className='level-creat__description'\r\n//                             ref={this.descriptionRef}\r\n//                             type=\"text\"\r\n//                             value={this.state.description}\r\n//                             placeholder='Описание'\r\n//                             onChange={this.changeDescription}\r\n//                         />\r\n//\r\n//                     </div>\r\n//                     {\r\n//                         this.state.rounds.map((round,id) => (\r\n//                                 <RoundCreater\r\n//                                     key={id}\r\n//                                     roundId={id}\r\n//                                     question={round.text}\r\n//                                     answer={round.answer}\r\n//                                     addAnswer={this.addAnswer}\r\n//                                     changeQuestion={this.changeQuestion}\r\n//                                     changeAnswer={this.changeAnswer}\r\n//                                 />\r\n//                         ))\r\n//                     }\r\n//                     <button className=\"create-round__add-btn create-round__add-round-btn\" onClick={this.addRound}><i className=\"far fa-plus-square\"></i></button>\r\n//                 </form>\r\n//\r\n//                 <button className=\"create-window__create-button\" onClick={this.create}>Создать</button>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n//start changes","const defaultLevels = [\r\n    {\r\n        id: 1,\r\n        name: \"Colors\",\r\n        description: \"Демо уровень с цветами\",\r\n        rounds: [\r\n            {\r\n                id: 1,\r\n                text: 'black',\r\n                answer: ['черный', 'чёрный'],\r\n                mode: \"Write\"\r\n            },\r\n            {\r\n                id: 2,\r\n                text: 'white',\r\n                answer: ['белый'],\r\n                mode: \"Write\"\r\n            },\r\n            {\r\n                id: 3,\r\n                text: 'green',\r\n                answer: ['зеленый'],\r\n                mode: \"Write\"\r\n            },\r\n            {\r\n                id: 4,\r\n                text: 'pink',\r\n                answer: ['розовый'],\r\n                mode: \"Write\"\r\n            },\r\n            {\r\n                id: 5,\r\n                text: 'yellow',\r\n                answer: ['желтый'],\r\n                mode: \"Write\"\r\n            },\r\n            {\r\n                id: 6,\r\n                text: 'brown',\r\n                answer: ['коричневый'],\r\n                mode: \"Write\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        id: 2,\r\n        name: \"Animals\",\r\n        description: \"Демо уровень с животными\",\r\n        rounds: [\r\n            {\r\n                id: 1,\r\n                text: 'Cat',\r\n                answer: ['кот', 'кошка'],\r\n                mode: \"Write\"\r\n            },\r\n            {\r\n                id: 2,\r\n                text: 'chicken',\r\n                answer: ['курица'],\r\n                mode: \"Write\"\r\n            },\r\n            {\r\n                id: 3,\r\n                text: 'crab',\r\n                answer: ['краб'],\r\n                mode: \"Write\"\r\n            }\r\n        ]\r\n    }\r\n\r\n];\r\n\r\nexport default defaultLevels;","import React from 'react';\r\n\r\nimport './style.css';\r\n\r\nexport default function Header (props) {\r\n    return (\r\n        <header className=\"header-main\" >\r\n            <img className=\"eni_logo\" src={require('../../img/Eni-min.svg')} alt=\"\"/>\r\n            <h1 className={\"logoMain\"}><span>local</span>EnLearning</h1>\r\n        </header>\r\n    )\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './style.css';\r\n\r\nexport default function LevelCard (props){\r\n    const deleteSelf = () => {\r\n        props.deleteCard(props.id)\r\n    };\r\n\r\n    const startLevel = (e) => {\r\n        if(e.target.className === \"fas fa-trash-alt delete-icon\"){ // fix\r\n            return deleteSelf();\r\n        }\r\n        console.log(props.rounds);\r\n        props.startLevel({\r\n            name: props.name,\r\n            rounds: props.rounds\r\n        });\r\n    };\r\n\r\n    return (\r\n        <li className={\"LevelCard\"} onClick={startLevel}>\r\n            <div className='LevelCard__play'>\r\n                <i className=\"fas fa-play\"></i>\r\n            </div>\r\n            <h2 className={\"LevelCard__name\"}>{props.name}</h2>\r\n            <p className={\"LevelCard__description\"}>{props.description}</p>\r\n            <i\r\n                className=\"fas fa-trash-alt delete-icon\"\r\n                onClick={deleteSelf}\r\n            />\r\n        </li>\r\n    )\r\n}\r\n\r\nLevelCard.propTypes = {\r\n    name: PropTypes.string,\r\n    description: PropTypes.string,\r\n    rounds: PropTypes.array,\r\n    startLevel: PropTypes.func,\r\n    id: PropTypes.number,\r\n    deleteCard: PropTypes.func\r\n};\r\n","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport './style.css';\r\n\r\nimport LevelCard from \"../LevelCard\";\r\n\r\nexport default function LevelsList (props) {\r\n    const getListElements = arr => (arr.map(elem => (\r\n                <LevelCard\r\n                    key={elem.id}\r\n                    id={elem.id}\r\n                    name={elem.name}\r\n                    description={elem.description}\r\n                    rounds={elem.rounds}\r\n                    startLevel={props.startLevel}\r\n                    deleteCard={props.deleteCard}\r\n                />\r\n                )));\r\n\r\n    return (\r\n        <ul className={\"LevelsList\"}>\r\n            {getListElements(props.levels)}\r\n        </ul>\r\n    )\r\n}\r\n\r\nLevelsList.propTypes = {\r\n    startLevel: PropTypes.func\r\n};","import React from 'react';\r\n\r\nimport './style.css';\r\n\r\nimport { getCookie } from \"../../funcs\";\r\n\r\nexport default function RightBar (props) {\r\n\r\n    let statistic;\r\n    if(getCookie(\"lastStatistic\")) {\r\n        statistic = JSON.parse(getCookie(\"lastStatistic\"));\r\n    }\r\n\r\n    return (\r\n        <article className=\"right-bar\" >\r\n            <h2>Statistic last test</h2>\r\n            {(!statistic)?\r\n                <div className=\"right-bar__empty\">\r\n                    <img className=\"right-bar__img\" src={require('../../img/Eni-min.svg')} alt=\"Eni\"/>\r\n                    <p className=\"right-bar__empty-text\">Empty now</p>\r\n                </div>\r\n            :\r\n                <div className=\"right-bar__statistic\">\r\n                    <p className=\"statistic__level-name\">{statistic.levelName}</p>\r\n                    <p>{`Error: ${statistic.error}`}</p>\r\n                    <p>{`Right: ${statistic.right}`}</p>\r\n                    <p>{`Speed: ${statistic.speed} s`}</p>\r\n                    <span>{`Completed: ${statistic.completed}`}</span>\r\n                </div>\r\n            }\r\n\r\n        </article>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LevelCreater from \"../../LevelCreater\";\r\n\r\nimport './style.css';\r\n\r\nimport defaultLevels from '../../../defaultLevels';\r\n\r\nimport Header from  \"../../Header\";\r\nimport LevelsList from \"../../LevelsList\";\r\nimport RightBar from \"../../RightBar\";\r\n\r\nimport {getCookie, setCookie} from \"../../../funcs\";\r\n\r\nexport default function PageMain (props) {\r\n    if (!getCookie('levels')) {\r\n        console.log('Сохраненных уровней нет. Установка уровней по умолчанию');\r\n        setCookie('levels', JSON.stringify(defaultLevels));\r\n    }\r\n\r\n    const [levels, setLevels] = useState(JSON.parse(getCookie('levels')));\r\n    const [levelCreater, setLevelCreater] = useState(false); //for toggle view of window of level create\r\n\r\n    const deleteCard = (cardId) => {\r\n        let newLevels = levels.filter(elem => elem.id !== cardId);\r\n        setCookie('levels', JSON.stringify(newLevels));\r\n        setLevels(newLevels);\r\n    };\r\n\r\n    const levelCreaterToggle = () => {\r\n        setLevelCreater(!levelCreater);\r\n    };\r\n\r\n    const addLevel = (newLevel) => {\r\n        newLevel.id = levels.length+1;\r\n        let newLevels = levels.slice();\r\n        newLevels.push(newLevel);\r\n        setCookie('levels', JSON.stringify(newLevels));\r\n        setLevels(newLevels);\r\n        setLevelCreater(false);\r\n     };\r\n\r\n    return (\r\n        <div className={\"PageMain\"}>\r\n             <Header/>\r\n             <div className=\"PageMain__content\">\r\n                 <main>\r\n                     <LevelsList\r\n                         levels={levels}\r\n                         startLevel={props.startLevel}\r\n                         deleteCard={deleteCard}\r\n                     />\r\n                     <button\r\n                         className='levels-list__add-btn hint--right'\r\n                         aria-label='Создать новый тест'\r\n                         onClick={levelCreaterToggle}\r\n                     >\r\n                         <i className=\"far fa-plus-square\"></i>\r\n                     </button>\r\n                 </main>\r\n                 <RightBar/>\r\n             </div>\r\n            {(levelCreater)?<LevelCreater levelCreaterToggle={levelCreaterToggle} addLevel={addLevel} />:''}\r\n         </div>\r\n    )\r\n}\r\n\r\nPageMain.propTypes = {\r\n    startLevel: PropTypes.func\r\n};","import React from 'react';\r\n\r\nimport './style.css';\r\n\r\nexport default function LevelHeader (props) {\r\n    //const [exp, setExp] = useState(0);\r\n    const score = props.score;\r\n\r\n    return(\r\n        <header className=\"header-level\">\r\n            <h1>{props.levelName}</h1>\r\n            <h1 className={\"header__score\"}>{`Score: ${score}`}</h1>\r\n            <div className=\"score-bar\"><div className=\"score-bar__fill\" style={{\"width\":`${score * 10}%`}}></div></div>\r\n        </header>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport \"./style.css\";\r\nimport { Transition } from \"react-transition-group\";\r\n\r\n\r\n\r\nexport default function RoundWindow (props) {\r\n    const [buttonActive, setButtonActive] = useState(false);\r\n    const [exitMode, setExitMode] = useState(\"RoundWindow\"); // mod of view round window\r\n    const [show, setShow] = useState(true);\r\n\r\n    const roundInput = React.createRef();\r\n\r\n    useEffect(()=>{\r\n        setShow(true);\r\n    }, []);\r\n\r\n    const roundClear = () => {\r\n        setButtonActive(false);\r\n        roundInput.current.value = '';\r\n    };\r\n\r\n    const checkAnswer = (e) => {\r\n        e.preventDefault();\r\n        let answer = getAnswer().value.replace(/\\s{2,}/g, ' ').trim().toLowerCase();\r\n\r\n        if (props.answer.find( (el) => (el === answer) )) {\r\n            props.changeScore(1);\r\n\r\n            setExitMode(\"right-answer\");\r\n        } else {\r\n            props.changeScore(-1);\r\n            setExitMode(\"fail-answer\");\r\n        }\r\n\r\n        setShow(false);\r\n    };\r\n\r\n    const getAnswer = () => {\r\n        return document.getElementsByClassName(\"RoundWindow__input\")[0];\r\n    };\r\n\r\n    const buttonActivate = () => {\r\n        if (getAnswer().value){\r\n            setButtonActive(true);\r\n        } else {\r\n            setButtonActive(false);\r\n        }\r\n    };\r\n\r\n    const text = props.text;\r\n    const buttonText = buttonActive? \"Проверить\": \"Пропустить\";\r\n    const buttonClassName = buttonActive?\r\n        \"RoundWindow__button RoundWindow__button_action\":\r\n        \"RoundWindow__button\";\r\n\r\n    return (\r\n        <Transition\r\n            in={show}\r\n            timeout={0}\r\n            onExited={\r\n                () => {\r\n                    roundClear();\r\n                    setTimeout(()=>{\r\n                        setExitMode(\"RoundWindow\");\r\n                        setShow(true);\r\n                        props.goNextRound(props.roundId);\r\n                    },500);\r\n                }\r\n            }\r\n        >\r\n            {(state) => {\r\n                const animationClassName = `${exitMode}-${state}`;\r\n                return (\r\n                    <div className={`RoundWindow ${animationClassName}`}>\r\n                        <p className={`RoundWindow__text`} >{`${text}`}</p>\r\n                        <form action=\"#\" onSubmit={checkAnswer}>\r\n                            <input\r\n                                type=\"text\"\r\n                                className={\"RoundWindow__input\"}\r\n                                onChange={buttonActivate}\r\n                                ref={roundInput}\r\n                            />\r\n                            <input\r\n                                type=\"submit\"\r\n                                value={buttonText}\r\n                                className={buttonClassName}\r\n                            />\r\n                        </form>\r\n                    </div>\r\n                )\r\n            }}\r\n        </Transition>\r\n    )\r\n}\r\n\r\nRoundWindow.propTypes = {\r\n    text: PropTypes.string,\r\n    answer: PropTypes.array,\r\n    roundId: PropTypes.number,\r\n    goNextRound: PropTypes.func,\r\n    changeScore: PropTypes.func,\r\n    mode: PropTypes.string\r\n};","import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { shuffleArray } from '../../../funcs.js';\r\n\r\nimport \"./style.css\";\r\nimport { Transition } from \"react-transition-group\";\r\n\r\n// function roundWindowConstructor(roundMode, question, otherData, animationClassName, answers) { // otherData -- object with handlers\r\n\r\nexport default function RoundSelect (props) {\r\n    const [buttonActive, setButtonActive] = useState(false);\r\n    const [exitMode, setExitMode] = useState(\"RoundWrite\");\r\n    const [show, setShow] = useState(true);\r\n    const [answers, setAnswers] = useState(props.answer);\r\n    // console.log(answers);\r\n    // console.log(\"props answers\", props.answer);\r\n\r\n    console.log(\"props\", props);\r\n\r\n    let answersHrefs = [];\r\n\r\n    useEffect(()=>{\r\n        setShow(true);\r\n        setAnswers(shuffleArray(props.answer));\r\n    }, [props.answer]);\r\n\r\n    const roundClear = () => {\r\n        setButtonActive(false);\r\n        answersHrefs.forEach(ans => ans.current.checked = false);\r\n    };\r\n\r\n    const checkAnswer = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (props.answer[0] === getAnswer()) {\r\n            props.changeScore(1);\r\n            setExitMode(\"right-answer\");\r\n        } else {\r\n            props.changeScore(-1);\r\n            setExitMode(\"fail-answer\");\r\n        }\r\n\r\n        setShow(false);\r\n    };\r\n\r\n    const getAnswer = () => {\r\n        let answerChecked = answersHrefs.filter(ans => ans.current.checked)[0];\r\n\r\n        if (answerChecked) {\r\n            return answerChecked.current.value\r\n        } else {\r\n            return ''\r\n        }\r\n    };\r\n\r\n    const buttonActivate = () => {\r\n        setButtonActive(true);\r\n    };\r\n\r\n    const text = props.text;\r\n    const buttonText = buttonActive? \"Проверить\": \"Пропустить\";\r\n    const buttonClassName = buttonActive?\r\n        \"RoundWindow__button RoundWindow__button_action\":\r\n        \"RoundWindow__button\";\r\n\r\n    answers.forEach(() => {\r\n        answersHrefs.push(React.createRef());\r\n    });\r\n\r\n    return (\r\n        <Transition\r\n            in={show}\r\n            timeout={0}\r\n            onExited={\r\n                () => {\r\n                    roundClear();\r\n                    setTimeout(()=>{\r\n                        setExitMode(\"RoundWrite\");\r\n                        setShow(true);\r\n                        props.goNextRound(props.roundId);\r\n                    },500);\r\n                }\r\n            }\r\n        >\r\n            {(state) => {\r\n                const animationClassName = `${exitMode}-${state}`;\r\n                return (\r\n                    <div className={`RoundWindow ${animationClassName}`} key={props.roundId}>\r\n                        <p className={`RoundWindow__text`} >{`${text}`}</p>\r\n                        <form action=\"#\" onSubmit={checkAnswer}>\r\n                            {\r\n                                answers.map((ans,ansId) => {\r\n                                    return (\r\n                                        <div\r\n                                            className = \"answer-select_block\"\r\n                                            key = {`${ans}-${ansId}`}\r\n                                        >\r\n                                            < input\r\n                                                ref={answersHrefs[ansId]}\r\n                                                id = {`answer-${ans}`}\r\n                                                name = \"possible_answer\"\r\n                                                type = \"radio\"\r\n                                                value = {ans}\r\n                                                onChange={buttonActivate}\r\n                                            />\r\n                                            <label htmlFor={`answer-${ans}`}>{ans}</label>\r\n                                        </div>\r\n                                    );\r\n                                })\r\n                            }\r\n                            <input\r\n                                type=\"submit\"\r\n                                value={buttonText}\r\n                                className={buttonClassName}\r\n                            />\r\n                        </form>\r\n                    </div>\r\n                )\r\n            }}\r\n        </Transition>\r\n    )\r\n}\r\n\r\nRoundSelect.propTypes = {\r\n    text: PropTypes.string,\r\n    answer: PropTypes.array,\r\n    roundId: PropTypes.number,\r\n    goNextRound: PropTypes.func,\r\n    changeScore: PropTypes.func\r\n};\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './style.css';\r\nimport LevelHeader from \"../../LevelHeader\";\r\nimport RoundWrite from \"../../RoundWindows/RoundWrite\";\r\nimport RoundSelect from \"../../RoundWindows/RoundSelect\";\r\n\r\nimport { usePageLevel } from '../../../hooks'\r\n\r\nexport default function PageLevel (props) {\r\n\r\n    const [\r\n        score, round,\r\n        goNextRound,\r\n        changeScore\r\n    ] = usePageLevel(props);\r\n\r\n    let roundElement;\r\n\r\n    switch(round.mode) {\r\n        case \"Write\":\r\n            roundElement = (\r\n                <RoundWrite\r\n                    text={round.text}\r\n                    answer={round.answer}\r\n                    roundId={round.id}\r\n                    goNextRound={goNextRound}\r\n                    changeScore={changeScore}\r\n                    mode={round.mode}\r\n                />\r\n            );\r\n            break;\r\n        case \"Select\":\r\n            roundElement = (\r\n                <RoundSelect\r\n                    text={round.text}\r\n                    answer={round.answer}\r\n                    roundId={round.id}\r\n                    goNextRound={goNextRound}\r\n                    changeScore={changeScore}\r\n                    mode={round.mode}\r\n                />\r\n            );\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <div className={\"PageLevel\"}>\r\n            <LevelHeader levelName={props.name} score={score}/>\r\n            {roundElement}\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\n\r\n// export default class PageLevel extends Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//\r\n//         this.state = {\r\n//             roundSelected: 1,\r\n//             roundsCompleted: [],\r\n//             score: 0,\r\n//             err: 0,\r\n//             right: 0,\r\n//             startTime: new Date()\r\n//         }\r\n//     }\r\n//\r\n//     goNextRound = (selectedNow) => {\r\n//         if (this.state.roundsCompleted.length === this.props.rounds.length-2) {\r\n//             this.setState({roundsCompleted: []});\r\n//         }\r\n//\r\n//         let nextRoundId = randomInteger(1, this.props.rounds.length);\r\n//         while(this.state.roundsCompleted.indexOf(nextRoundId) !== -1 || nextRoundId === selectedNow){\r\n//             nextRoundId = randomInteger(1, this.props.rounds.length)\r\n//         }\r\n//\r\n//         this.setState((oldState)=>{\r\n//             return {\r\n//                 roundSelected: nextRoundId,\r\n//                 roundsCompleted: oldState.roundsCompleted.concat(selectedNow)\r\n//             }\r\n//         });\r\n//         console.log(this.state.roundsCompleted);\r\n//     };\r\n//\r\n//     changeScore = (changes) => {\r\n//         (changes > 0)?\r\n//             this.setState(oldState=>({right:oldState.right+1})):\r\n//             this.setState(oldState=>({err:oldState.err+1}));\r\n//\r\n//         if (changes < 0){\r\n//             if (this.state.score === 0) {\r\n//                 return\r\n//             }\r\n//         } else if (this.state.score >= 9) {\r\n//             setTimeout(this.exitLevel, 1000);\r\n//         }\r\n//\r\n//         this.setState((state) => {\r\n//             return{score: state.score + changes}\r\n//         });\r\n//     };\r\n//\r\n//     exitLevel = () => {\r\n//         const date = new Date();\r\n//         setCookie('lastStatistic', JSON.stringify(\r\n//             {\r\n//                 levelName: this.props.name,\r\n//                 error: this.state.err,\r\n//                 right: this.state.right,\r\n//                 speed: (date - this.state.startTime) / 1000,\r\n//                 completed: `${date.getMonth()+1}.${date.getDate()} ${date.getHours()}:${date.getMinutes()}`\r\n//             }\r\n//         ));\r\n//         this.props.endLevel();\r\n//     };\r\n//\r\n//     render() {\r\n//         const score = this.state.score;\r\n//         let round = this.props.rounds.find((round) => (\r\n//             round.id === this.state.roundSelected)\r\n//         );\r\n//         const roundText = round.text;\r\n//         const roundAnswer = round.answer;\r\n//         const roundId = round.id;\r\n//\r\n//         return (\r\n//             <div className={\"PageLevel\"}>\r\n//                 <LevelHeader levelName={this.props.name} score={score}/>\r\n//\r\n//                 <RoundWrite\r\n//                     text={roundText}\r\n//                     answer={roundAnswer}\r\n//                     roundId={roundId}\r\n//                     goNextRound={this.goNextRound}\r\n//                     changeScore={this.changeScore}\r\n//                 />\r\n//\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\nPageLevel.propTypes = {\r\n    name: PropTypes.string,\r\n    rounds: PropTypes.array,\r\n    goPage: PropTypes.func\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\n\nReactDOM.render(<App/>, document.getElementById('root'));","import React, {useState} from 'react';\r\n\r\nimport './style.css';\r\nimport './../../hint.css';\r\n\r\nimport PageMain from \"../Pages/PageMain\";\r\nimport PageLevel from \"../Pages/PageLevel\";\r\n\r\nexport default function App (props) {\r\n    const goPage = (page) => {\r\n        setSelectedPage(page);\r\n    };\r\n\r\n    const endLevel = () => {\r\n        goPage(pageMain);\r\n    };\r\n\r\n    const startLevel = levelData => {\r\n        const newPage = <PageLevel // create level page\r\n            name={levelData.name}\r\n            rounds={levelData.rounds}\r\n            goPage={goPage}\r\n            endLevel={endLevel}\r\n        />;\r\n\r\n        goPage(newPage);\r\n    };\r\n\r\n    let pageMain = <PageMain startLevel={startLevel} />;\r\n\r\n    const [selectedPage, setSelectedPage] = useState(pageMain);\r\n\r\n    return selectedPage\r\n}\r\n"],"sourceRoot":""}